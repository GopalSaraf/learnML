window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"learnML": {"fullname": "learnML", "modulename": "learnML", "kind": "module", "doc": "<h1 align=\"center\">LearnML - Mastering Machine Learning Algorithms</h1>\n\n<p align=\"center\">\n<img src=\"https://github.com/GopalSaraf/learnML/assets/83419951/5f8e7499-95bb-48e5-a198-eeb38e48b4a4\" width=\"80%\" height=\"auto\" />\n</p>\n\n<p><br></p>\n\n<p><strong>NOTE</strong>: The repository is currently <strong>under development</strong> and is not yet ready for use.</p>\n\n<p>GitHub Repository: <a href=\"https://github.com/GopalSaraf/learnML\">github.com/GopalSaraf/learnML</a> <br />\nLearnML Website: <a href=\"https://learnML.gopalsaraf.com\">learnML.gopalsaraf.com</a></p>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>LearnML is a comprehensive collection of machine learning algorithms implemented from scratch using Python. Each algorithm is encapsulated as a class and thoroughly tested across different datasets.</p>\n\n<p>The primary objective of this repository is to provide educational resources that facilitate a deep understanding of the internal mechanisms governing popular machine learning algorithms.</p>\n\n<p>It is essential to emphasize that the algorithms included in this repository are intended for educational purposes and might not be optimized for production environments.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>To get started with LearnML, follow these steps:</p>\n\n<ol>\n<li>Clone the repository using the command: <code>git clone https://github.com/GopalSaraf/learnML</code>.</li>\n<li>Move into the repository directory: <code>cd learnML</code>.</li>\n<li>Create a virtual environment: <code>python -m venv venv</code>.</li>\n<li>Activate the virtual environment:\n<ul>\n<li>On Linux/Mac: <code>source venv/bin/activate</code></li>\n<li>On Windows: <code>venv\\Scripts\\activate</code></li>\n</ul></li>\n<li>Install the required dependencies: <code>pip install -r requirements.txt</code>.</li>\n<li>Install the LearnML library: <code>pip install .</code>.</li>\n</ol>\n\n<h2 id=\"documentation\">Documentation</h2>\n\n<p>LearnML's documentation is generated using pdoc.</p>\n\n<p>You can access the LearnML library documentation on the <a href=\"https://learnml.gopalsaraf.com/\">LearnML website</a>.</p>\n\n<p>For offline access, you can find the documentation in the <code>docs</code> folder. Check out the <a href=\"https://github.com/GopalSaraf/learnML/blob/main/docs/README.md\">documentation here</a>.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<p>The <code>examples</code> folder contains practical examples that illustrate how to utilize the algorithms. Each example focuses on a specific algorithm and demonstrates its application on a sample dataset.</p>\n\n<h2 id=\"contributing\">Contributing</h2>\n\n<p>Contributions to the LearnML repository are greatly appreciated! To contribute, follow these steps:</p>\n\n<ol>\n<li>Fork the repository and create a new branch for your work.</li>\n<li>Implement your changes and additions.</li>\n<li>Validate your modifications using appropriate examples and ensure overall functionality.</li>\n<li>Open a pull request, which will then be reviewed by the maintainers.</li>\n</ol>\n\n<p>As previously mentioned, please be aware that the algorithms in this repository are meant for educational purposes and may not be optimized for production environments.</p>\n\n<h2 id=\"license\">License</h2>\n\n<p>This repository is licensed under the <a href=\"LICENSE\">MIT License</a>.</p>\n\n<h2 id=\"contact\">Contact</h2>\n\n<p>If you have any inquiries or require assistance, feel free to contact <a href=\"https://github.com/GopalSaraf\">Gopal Saraf</a>.</p>\n\n<p><strong>Enjoy your learning journey!</strong></p>\n"}, "learnML.classification": {"fullname": "learnML.classification", "modulename": "learnML.classification", "kind": "module", "doc": "<p></p>\n"}, "learnML.classification.LogisticRegression": {"fullname": "learnML.classification.LogisticRegression", "modulename": "learnML.classification", "qualname": "LogisticRegression", "kind": "class", "doc": "<h1 id=\"logistic-regression-model\">Logistic Regression Model</h1>\n\n<p>Logistic Regression is a fundamental classification algorithm used to model the probability of a binary outcome. It's widely employed in machine learning for binary classification tasks and offers insights into the relationship between input features and class probabilities.</p>\n\n<hr />\n\n<h2 id=\"mathematical-approach\">Mathematical Approach</h2>\n\n<p>Logistic Regression aims to predict the probability of a binary outcome by modeling it as a sigmoid function of a linear combination of input features. The equation takes the form:</p>\n\n<pre><code>P(y=1 | X) = 1 / (1 + e^(-z))\n</code></pre>\n\n<p>Where <code>P(y=1 | X)</code> is the probability of the positive class given input <code>X</code>, and <code>z</code> is the linear combination of input features, weights, and an intercept.</p>\n\n<hr />\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>To use the Logistic Regression model, follow these steps:</p>\n\n<ol>\n<li>Import the <code>LogisticRegression</code> class from the appropriate module.</li>\n<li>Create an instance of the <code>LogisticRegression</code> class, specifying hyperparameters.</li>\n<li>Fit the model to your training data using the <code>fit</code> method.</li>\n<li>Make predictions on new data using the <code>predict</code> method.</li>\n<li>Evaluate the model's performance using the <code>score</code> method.</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">learnML.classification</span> <span class=\"kn\">import</span> <span class=\"n\">LogisticRegression</span>\n\n<span class=\"c1\"># Create an instance of LogisticRegression</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">LogisticRegression</span><span class=\"p\">(</span><span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">,</span> <span class=\"n\">n_iterations</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Fit the model to training data</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">Y_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Make predictions on new data</span>\n<span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calculate the model&#39;s score</span>\n<span class=\"n\">model_score</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">Y_test</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<hr />\n\n<h2 id=\"advantages\">Advantages</h2>\n\n<ul>\n<li>Simple and efficient</li>\n<li>Can be updated easily with new data using stochastic gradient descent</li>\n<li>Outputs have a nice probabilistic interpretation</li>\n<li>Can be regularized to avoid overfitting</li>\n<li>Works well with high dimensional data</li>\n<li>Works well with sparse data</li>\n</ul>\n\n<h2 id=\"disadvantages\">Disadvantages</h2>\n\n<ul>\n<li>Not suitable for large number of features</li>\n<li>Not suitable for non-linear problems</li>\n</ul>\n\n<hr />\n", "bases": "learnML.interfaces.iregression.IRegression"}, "learnML.classification.LogisticRegression.__init__": {"fullname": "learnML.classification.LogisticRegression.__init__", "modulename": "learnML.classification", "qualname": "LogisticRegression.__init__", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>learning_rate</code> : np.float64, optional</p>\n\n<ul>\n<li>The learning rate, by default 0.001</li>\n<li>The learning rate determines how much the weights are updated at each iteration</li>\n<li>A low learning rate will take longer to converge, but a high learning rate may overshoot the optimal solution</li>\n</ul>\n\n<p><code>n_iterations</code> : int, optional</p>\n\n<ul>\n<li>The number of iterations, by default 1000</li>\n<li>The number of iterations determines how many times the weights are updated</li>\n<li>A higher number of iterations will take longer to converge, but a lower number of iterations may not be enough to converge</li>\n</ul>\n\n<p><code>lambda_</code> : np.float64, optional</p>\n\n<ul>\n<li>The regularization parameter, by default 0</li>\n<li>The regularization parameter helps prevent overfitting by penalizing large weights</li>\n<li>A higher regularization parameter will penalize large weights more, but a lower regularization parameter may not be enough to prevent overfitting</li>\n</ul>\n\n<p><code>x_scalar</code> : Union[IFeatureEngineering, List[IFeatureEngineering]], optional</p>\n\n<ul>\n<li>The feature engineering for the input data, by default None</li>\n<li>If a list is provided, the feature engineering will be applied in the order provided</li>\n<li>If a single feature engineering is provided, it will be applied to all input data</li>\n</ul>\n\n<p><code>debug</code> : bool, optional</p>\n\n<ul>\n<li>Whether to print debug messages, by default True</li>\n<li>Debug messages include the cost at each iteration</li>\n</ul>\n\n<p><code>copy_x</code> : bool, optional</p>\n\n<ul>\n<li>Whether to copy the input array, by default True</li>\n<li>If False, the input array will be overwritten</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">n_iterations</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">lambda_</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">x_scalar</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">learnML</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ifeature_engineering</span><span class=\"o\">.</span><span class=\"n\">IFeatureEngineering</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">learnML</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ifeature_engineering</span><span class=\"o\">.</span><span class=\"n\">IFeatureEngineering</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">copy_x</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, "learnML.classification.LogisticRegression.fit": {"fullname": "learnML.classification.LogisticRegression.fit", "modulename": "learnML.classification", "qualname": "LogisticRegression.fit", "kind": "function", "doc": "<h3 id=\"fit-the-model-to-the-data\">Fit the model to the data.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features) or (n_samples,)</li>\n</ul>\n\n<p><code>Y</code> : np.ndarray</p>\n\n<ul>\n<li>The output array of shape (n_samples,) or (n_samples, 1)</li>\n</ul>\n\n<p><code>w</code> : np.ndarray, optional</p>\n\n<ul>\n<li>The weight array, by default None</li>\n<li>If None, then the weight array will be initialized to an array of\nzeros of shape (n_features,)</li>\n<li>If not None, then the weight array will be initialized to the given\narray</li>\n</ul>\n\n<p><code>b</code> : np.float64, optional</p>\n\n<ul>\n<li>The intercept, by default 0.0</li>\n<li>If None, then the intercept will be initialized to 0.0</li>\n<li>If not None, then the intercept will be initialized to the given\nvalue</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "learnML.classification.LogisticRegression.predict_proba": {"fullname": "learnML.classification.LogisticRegression.predict_proba", "modulename": "learnML.classification", "qualname": "LogisticRegression.predict_proba", "kind": "function", "doc": "<h3 id=\"predict-the-probability-of-the-output-given-the-input\">Predict the probability of the output given the input.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features) or (n_features,)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The predicted output array of shape (n_samples,) or (1,)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.classification.LogisticRegression.predict": {"fullname": "learnML.classification.LogisticRegression.predict", "modulename": "learnML.classification", "qualname": "LogisticRegression.predict", "kind": "function", "doc": "<h3 id=\"predict-the-output-given-the-input\">Predict the output given the input.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features) or (n_features,)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The predicted output array of shape (n_samples,) or (1,)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.classification.LogisticRegression.score": {"fullname": "learnML.classification.LogisticRegression.score", "modulename": "learnML.classification", "qualname": "LogisticRegression.score", "kind": "function", "doc": "<h3 id=\"return-the-cost-of-the-model-given-x-y-w-and-b\">Return the cost of the model given X, Y, W, and b.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features)</li>\n</ul>\n\n<p><code>Y</code> : np.ndarray</p>\n\n<ul>\n<li>The output array of shape (n_samples,)</li>\n</ul>\n\n<p><code>W</code> : np.ndarray, optional</p>\n\n<ul>\n<li>The weight array of shape (n_features,), by default None</li>\n<li>If None, then the weight array will be cosidered as the trained\nweight array</li>\n</ul>\n\n<p><code>b</code> : np.float64, optional</p>\n\n<ul>\n<li>The intercept, by default None</li>\n<li>If None, then the intercept will be cosidered as the trained\nintercept</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.float64</code></p>\n\n<ul>\n<li>The cost of the model</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.classification.LinearSVC": {"fullname": "learnML.classification.LinearSVC", "modulename": "learnML.classification", "qualname": "LinearSVC", "kind": "class", "doc": "<h1 id=\"support-vector-classifier\">Support Vector Classifier</h1>\n\n<p><code>LinearSVC</code> (Support Vector Classifier) is a classification algorithm that aims to separate data into two classes by finding a hyperplane that maximizes the margin between them. It's effective for high-dimensional data and can handle small sample sizes efficiently. This algorithm seeks to create a decision boundary by minimizing classification errors and maximizing the margin between the classes.</p>\n\n<hr />\n\n<h2 id=\"mathematical-approach\">Mathematical Approach</h2>\n\n<p><code>LinearSVC</code> aims to find a hyperplane that best separates two classes by minimizing a loss function known as the hinge loss. The decision boundary is represented as a linear combination of input features, weights, and an intercept:</p>\n\n<pre><code>z = X * W - b\n</code></pre>\n\n<p>Where:</p>\n\n<ul>\n<li><code>X</code> is the input data matrix of shape <code>(n_samples, n_features)</code>.</li>\n<li><code>W</code> is the weight vector of shape <code>(n_features,)</code>.</li>\n<li><code>b</code> is the intercept.</li>\n</ul>\n\n<p>The predicted class <code>y_hat</code> is determined based on the sign of <code>z</code>:</p>\n\n<pre><code>y_hat = sign(z)\n</code></pre>\n\n<hr />\n\n<h3 id=\"hinge-loss\">Hinge Loss</h3>\n\n<p>The hinge loss function measures the degree of violation of a sample's classification. For a sample <code>(x_i, y_i)</code>, where <code>x_i</code> is the input data and <code>y_i</code> is the true class label (-1 or 1), the hinge loss is defined as:</p>\n\n<pre><code>loss_i = max(0, 1 - y_i * z_i)\n</code></pre>\n\n<p>Where <code>z_i</code> is the linear combination for the <code>i</code>-th sample. The overall hinge loss for the entire dataset is the sum of individual hinge losses:</p>\n\n<pre><code>loss = sum(max(0, 1 - y_i * z_i)) for all samples i\n</code></pre>\n\n<hr />\n\n<h3 id=\"margin-and-support-vectors\">Margin and Support Vectors</h3>\n\n<p>The margin is the distance between the decision boundary and the closest data points. The goal is to maximize this margin while minimizing the hinge loss. Support vectors are the data points that are closest to the decision boundary and play a crucial role in defining the hyperplane.</p>\n\n<p>Maximizing the margin is equivalent to minimizing the norm of the weight vector <code>W</code>:</p>\n\n<pre><code>min (||W|| / 2)\n</code></pre>\n\n<hr />\n\n<h3 id=\"regularization\">Regularization</h3>\n\n<p>Regularization is used to prevent overfitting by penalizing large weights. The regularization term is added to the loss function and is defined as:</p>\n\n<pre><code>lambda_ * ||W||^2\n</code></pre>\n\n<p>Where <code>lambda_</code> is the regularization parameter.</p>\n\n<hr />\n\n<h3 id=\"optimization\">Optimization</h3>\n\n<p>The goal is to minimize the hinge loss and the regularization term. This is achieved by using gradient descent to iteratively update the weights and intercept. The gradient of the hinge loss function with respect to the weights <code>W</code> and intercept <code>b</code> is calculated for each sample. For correctly classified samples (<code>y * z &gt;= 1</code>), only the regularization term contributes to the gradient. For misclassified samples (<code>y * z &lt; 1</code>), both the regularization term and the hinge loss gradient contribute.</p>\n\n<p>The gradients are averaged over all samples and used to update the weights and intercept using the learning rate. This process is repeated for the specified number of iterations.</p>\n\n<hr />\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>To use the <code>LinearSVC</code> model, follow these steps:</p>\n\n<ol>\n<li>Import the <code>LinearSVC</code> class from the appropriate module.</li>\n<li>Create an instance of the <code>LinearSVC</code> class, specifying hyperparameters.</li>\n<li>Fit the model to your training data using the <code>fit</code> method.</li>\n<li>Make predictions on new data using the <code>predict</code> method.</li>\n<li>Evaluate the model's performance using the <code>score</code> method.</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">learnML.classification</span> <span class=\"kn\">import</span> <span class=\"n\">LinearSVC</span>\n\n<span class=\"c1\"># Create an instance of LinearSVC</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">LinearSVC</span><span class=\"p\">(</span><span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">,</span> <span class=\"n\">lambda_</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"n\">n_iterations</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Fit the model to training data</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">Y_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Make predictions on new data</span>\n<span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calculate the model&#39;s score</span>\n<span class=\"n\">model_score</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">Y_test</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<hr />\n\n<h2 id=\"advantages\">Advantages</h2>\n\n<ul>\n<li>Effective in high dimensional spaces</li>\n<li>Works well with small number of samples</li>\n<li>Works efficiently when there is a clear margin of separation between classes</li>\n<li>Uses a subset of training points in the decision function (called support vectors), so it is also memory efficient</li>\n</ul>\n\n<h2 id=\"disadvantages\">Disadvantages</h2>\n\n<ul>\n<li>Not suitable for large number of samples (training time is higher)</li>\n<li>Not suitable for noisy data with overlapping classes</li>\n</ul>\n\n<hr />\n", "bases": "learnML.interfaces.iregression.IRegression"}, "learnML.classification.LinearSVC.__init__": {"fullname": "learnML.classification.LinearSVC.__init__", "modulename": "learnML.classification", "qualname": "LinearSVC.__init__", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>learning_rate</code> : np.float64, optional</p>\n\n<ul>\n<li>The learning rate, by default 0.001</li>\n<li>The learning rate determines how much the weights are updated at each iteration</li>\n<li>A low learning rate will take longer to converge, but a high learning rate may overshoot the optimal solution</li>\n</ul>\n\n<p><code>n_iterations</code> : int, optional</p>\n\n<ul>\n<li>The number of iterations, by default 1000</li>\n<li>The number of iterations determines how many times the weights are updated</li>\n<li>A higher number of iterations will take longer to converge, but a lower number of iterations may not be enough to converge</li>\n</ul>\n\n<p><code>lambda_</code> : np.float64, optional</p>\n\n<ul>\n<li>The regularization parameter, by default 0</li>\n<li>The regularization parameter helps prevent overfitting by penalizing large weights</li>\n<li>A higher regularization parameter will penalize large weights more, but a lower regularization parameter may not be enough to prevent overfitting</li>\n</ul>\n\n<p><code>x_scalar</code> : Union[IFeatureEngineering, List[IFeatureEngineering]], optional</p>\n\n<ul>\n<li>The feature engineering for the input data, by default None</li>\n<li>If a list is provided, the feature engineering will be applied in the order provided</li>\n<li>If a single feature engineering is provided, it will be applied to all input data</li>\n</ul>\n\n<p><code>debug</code> : bool, optional</p>\n\n<ul>\n<li>Whether to print debug messages, by default True</li>\n<li>Debug messages include the cost at each iteration</li>\n</ul>\n\n<p><code>copy_x</code> : bool, optional</p>\n\n<ul>\n<li>Whether to copy the input array, by default True</li>\n<li>If False, the input array will be overwritten</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">n_iterations</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">lambda_</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">x_scalar</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">learnML</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ifeature_engineering</span><span class=\"o\">.</span><span class=\"n\">IFeatureEngineering</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">learnML</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ifeature_engineering</span><span class=\"o\">.</span><span class=\"n\">IFeatureEngineering</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">copy_x</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, "learnML.classification.LinearSVC.fit": {"fullname": "learnML.classification.LinearSVC.fit", "modulename": "learnML.classification", "qualname": "LinearSVC.fit", "kind": "function", "doc": "<h3 id=\"fit-the-model-to-the-data\">Fit the model to the data</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The input data of shape (n_samples, n_features)</li>\n</ul>\n\n<p><code>y</code> : np.ndarray</p>\n\n<ul>\n<li>The target data of shape (n_samples, 1) or (n_samples,)</li>\n</ul>\n\n<p><code>W</code> : np.ndarray, optional</p>\n\n<ul>\n<li>The weights of shape (n_features,), by default None</li>\n<li>If None, then the weight array will be initialized to an array of\nzeros of shape (n_features,)</li>\n<li>If not None, then the weight array will be initialized to the given\narray</li>\n</ul>\n\n<p><code>b</code> : np.float64, optional</p>\n\n<ul>\n<li>The intercept, by default 0.0</li>\n<li>If None, then the intercept will be initialized to 0.0</li>\n<li>If not None, then the intercept will be initialized to the given\nvalue</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "learnML.classification.LinearSVC.predict": {"fullname": "learnML.classification.LinearSVC.predict", "modulename": "learnML.classification", "qualname": "LinearSVC.predict", "kind": "function", "doc": "<h3 id=\"predict-the-target-data\">Predict the target data</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The input data of shape (n_samples, n_features)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The predicted target data of shape (n_samples,)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.classification.LinearSVC.score": {"fullname": "learnML.classification.LinearSVC.score", "modulename": "learnML.classification", "qualname": "LinearSVC.score", "kind": "function", "doc": "<h3 id=\"return-the-cost-of-the-model-given-x-y-w-and-b\">Return the cost of the model given X, Y, W, and b.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features)</li>\n</ul>\n\n<p><code>Y</code> : np.ndarray</p>\n\n<ul>\n<li>The output array of shape (n_samples,)</li>\n</ul>\n\n<p><code>W</code> : np.ndarray, optional</p>\n\n<ul>\n<li>If None, then the weight array will be cosidered as the trained\nweight array</li>\n</ul>\n\n<p><code>b</code> : np.float64, optional</p>\n\n<ul>\n<li>The intercept, by default None</li>\n<li>If None, then the intercept will be cosidered as the trained\nintercept</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.float64</code></p>\n\n<ul>\n<li>The cost of the model</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.interfaces": {"fullname": "learnML.interfaces", "modulename": "learnML.interfaces", "kind": "module", "doc": "<p></p>\n"}, "learnML.interfaces.IModel": {"fullname": "learnML.interfaces.IModel", "modulename": "learnML.interfaces", "qualname": "IModel", "kind": "class", "doc": "<h1 id=\"imodel\">IModel</h1>\n\n<p>Interface for model classes.</p>\n\n<p>The <code>IModel</code> abstract class serves as a foundational interface for all model classes within the <code>learnML</code> library. By providing a consistent structure, it ensures that each model adheres to a common set of methods and behaviors. Models that inherit from <code>IModel</code> are expected to implement the <code>fit</code>, <code>predict</code>, and <code>score</code> methods, allowing users to seamlessly interchange and evaluate different models in their machine learning pipelines.</p>\n\n<hr />\n\n<h2 id=\"usage\">Usage</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">learnML.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IModel</span>\n\n<span class=\"c1\"># Define a custom model class that inherits from IModel</span>\n<span class=\"k\">class</span> <span class=\"nc\">CustomModel</span><span class=\"p\">(</span><span class=\"n\">IModel</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Implementation of the fit method</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">predict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Implementation of the predict method</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Implementation of the score method</span>\n        <span class=\"k\">pass</span>\n</code></pre>\n</div>\n\n<hr />\n", "bases": "abc.ABC"}, "learnML.interfaces.IModel.fit": {"fullname": "learnML.interfaces.IModel.fit", "modulename": "learnML.interfaces", "qualname": "IModel.fit", "kind": "function", "doc": "<h3 id=\"fit-the-model-to-the-data\">Fit the model to the data.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The array like object containing the input\ndata of shape (n_samples, n_features)</li>\n</ul>\n\n<p><code>Y</code> : np.ndarray</p>\n\n<ul>\n<li>The array like object containing the output\ndata of shape (n_samples, n_targets) or (n_samples,)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "learnML.interfaces.IModel.predict": {"fullname": "learnML.interfaces.IModel.predict", "modulename": "learnML.interfaces", "qualname": "IModel.predict", "kind": "function", "doc": "<h3 id=\"predict-the-output-given-the-input\">Predict the output given the input.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The array like object containing the input\ndata of shape (n_samples, n_features)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The array like object containing the output\ndata of shape (n_samples, n_targets) or (n_samples,)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.interfaces.IModel.score": {"fullname": "learnML.interfaces.IModel.score", "modulename": "learnML.interfaces", "qualname": "IModel.score", "kind": "function", "doc": "<h3 id=\"calculate-the-score-of-the-model\">Calculate the score of the model.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The array like object containing the input\ndata of shape (n_samples, n_features)</li>\n</ul>\n\n<p><code>Y</code> : np.ndarray</p>\n\n<ul>\n<li>The array like object containing the output\ndata of shape (n_samples, n_targets) or (n_samples,)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.float64</code></p>\n\n<ul>\n<li>The score of the model</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.interfaces.IFeatureEngineering": {"fullname": "learnML.interfaces.IFeatureEngineering", "modulename": "learnML.interfaces", "qualname": "IFeatureEngineering", "kind": "class", "doc": "<h1 id=\"ifeatureengineering\">IFeatureEngineering</h1>\n\n<p>Interface for feature engineering classes.</p>\n\n<p><code>IFeatureEngineering</code> is an abstract interface that defines methods for performing feature engineering on input data. Feature engineering involves transforming and preprocessing raw input data to create more informative and suitable features for machine learning models.</p>\n\n<hr />\n\n<h2 id=\"usage\">Usage</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">learnML.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IFeatureEngineering</span>\n\n<span class=\"c1\"># Create a custom feature engineering class that implements the IFeatureEngineering interface</span>\n<span class=\"k\">class</span> <span class=\"nc\">CustomFeatureEngineering</span><span class=\"p\">(</span><span class=\"n\">IFeatureEngineering</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Initialize necessary attributes or parameters</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">fit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Implement the fitting logic for the feature engineering</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">transform</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Implement the transformation logic for the feature engineering</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">fit_transform</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Implement the fitting and transformation logic for the feature engineering</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">inverse_transform</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Implement the inverse transformation logic for the feature engineering</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"c1\"># Create an instance of the custom feature engineering class</span>\n<span class=\"n\">feature_engineer</span> <span class=\"o\">=</span> <span class=\"n\">CustomFeatureEngineering</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=...</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Fit the feature engineering object to the data</span>\n<span class=\"n\">feature_engineer</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Transform the data using the feature engineering</span>\n<span class=\"n\">transformed_data</span> <span class=\"o\">=</span> <span class=\"n\">feature_engineer</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Inverse transform the transformed data back to the original representation</span>\n<span class=\"n\">original_data</span> <span class=\"o\">=</span> <span class=\"n\">feature_engineer</span><span class=\"o\">.</span><span class=\"n\">inverse_transform</span><span class=\"p\">(</span><span class=\"n\">transformed_data</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<hr />\n", "bases": "abc.ABC"}, "learnML.interfaces.IFeatureEngineering.__init__": {"fullname": "learnML.interfaces.IFeatureEngineering.__init__", "modulename": "learnML.interfaces", "qualname": "IFeatureEngineering.__init__", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>data</code> : np.ndarray</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span>)</span>"}, "learnML.interfaces.IFeatureEngineering.fit": {"fullname": "learnML.interfaces.IFeatureEngineering.fit", "modulename": "learnML.interfaces", "qualname": "IFeatureEngineering.fit", "kind": "function", "doc": "<h3 id=\"fit-the-feature-engineer-to-data\">Fit the feature engineer to data</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>data</code> : np.ndarray, optional</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features),\nby default None (uses the input array passed in the constructor)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "learnML.interfaces.IFeatureEngineering.transform": {"fullname": "learnML.interfaces.IFeatureEngineering.transform", "modulename": "learnML.interfaces", "qualname": "IFeatureEngineering.transform", "kind": "function", "doc": "<h3 id=\"transform-data-using-feature-engineer\">Transform data using feature engineer</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>data</code> : np.ndarray, optional</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features),\nby default None (uses the input array passed in the constructor)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The transformed data of shape (n_samples, n_features)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"fullname": "learnML.interfaces.IFeatureEngineering.fit_transform", "modulename": "learnML.interfaces", "qualname": "IFeatureEngineering.fit_transform", "kind": "function", "doc": "<h3 id=\"fit-the-feature-engineer-with-data-and-transform-with-it\">Fit the feature engineer with data and transform with it</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>data</code> : np.ndarray, optional</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features),\nby default None (uses the input array passed in the constructor)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The transformed data of shape (n_samples, n_features)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"fullname": "learnML.interfaces.IFeatureEngineering.inverse_transform", "modulename": "learnML.interfaces", "qualname": "IFeatureEngineering.inverse_transform", "kind": "function", "doc": "<h3 id=\"convert-the-data-back-to-the-original-representation\">Convert the data back to the original representation</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>data</code> : np.ndarray</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The transformed data of shape (n_samples, n_features)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.interfaces.IRegression": {"fullname": "learnML.interfaces.IRegression", "modulename": "learnML.interfaces", "qualname": "IRegression", "kind": "class", "doc": "<h1 id=\"ireression\">IReression</h1>\n\n<p>Interface for regression model classes.</p>\n\n<p><code>IRegression</code> is an abstract interface that extends the <code>IModel</code> interface and specifies the methods and attributes expected from regression model classes. Regression models are used to predict continuous target variables based on input features.</p>\n\n<hr />\n\n<h2 id=\"usage\">Usage</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">learnML.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IRegression</span>\n\n<span class=\"c1\"># Create a custom regression model class that implements the IRegression interface</span>\n<span class=\"k\">class</span> <span class=\"nc\">CustomRegression</span><span class=\"p\">(</span><span class=\"n\">IRegression</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">learning_rate</span><span class=\"p\">,</span> <span class=\"n\">n_iterations</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Initialize necessary attributes or hyperparameters</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">learning_rate</span><span class=\"p\">,</span> <span class=\"n\">n_iterations</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">fit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Implement the training logic for the regression model</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">predict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Implement the prediction logic for the regression model</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">score</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Implement the scoring logic for the regression model</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"c1\"># Create an instance of the custom regression model</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">CustomRegression</span><span class=\"p\">(</span><span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"n\">n_iterations</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Load training data</span>\n<span class=\"n\">X_train</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">Y_train</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n\n<span class=\"c1\"># Fit the model to the training data</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">Y_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Load test data</span>\n<span class=\"n\">X_test</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">Y_test</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n\n<span class=\"c1\"># Make predictions using the trained model</span>\n<span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Evaluate the model&#39;s performance</span>\n<span class=\"n\">score</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">Y_test</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get cost history and model parameters history</span>\n<span class=\"n\">cost_history</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">get_cost_history</span><span class=\"p\">()</span>\n<span class=\"n\">params_history</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">get_parameter_history</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get learned weights and intercept</span>\n<span class=\"n\">weights</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">get_weights</span><span class=\"p\">()</span>\n<span class=\"n\">intercept</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">get_intercept</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<hr />\n", "bases": "learnML.interfaces.imodel.IModel, abc.ABC"}, "learnML.interfaces.IRegression.__init__": {"fullname": "learnML.interfaces.IRegression.__init__", "modulename": "learnML.interfaces", "qualname": "IRegression.__init__", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>learning_rate</code> : np.float64</p>\n\n<ul>\n<li>The learning rate</li>\n</ul>\n\n<p><code>n_iterations</code> : int</p>\n\n<ul>\n<li>The number of iterations</li>\n</ul>\n\n<p><code>debug</code> : bool, optional</p>\n\n<ul>\n<li>Whether to print debug messages, by default True</li>\n</ul>\n\n<p><code>copy_x</code> : bool, optional</p>\n\n<ul>\n<li>Whether to copy the input array, by default True</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>,</span><span class=\"param\">\t<span class=\"n\">n_iterations</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">copy_x</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, "learnML.interfaces.IRegression.fit": {"fullname": "learnML.interfaces.IRegression.fit", "modulename": "learnML.interfaces", "qualname": "IRegression.fit", "kind": "function", "doc": "<h3 id=\"fit-the-model-to-the-data\">Fit the model to the data.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The array like object containing the input\ndata of shape (n_samples, n_features)</li>\n</ul>\n\n<p><code>Y</code> : np.ndarray</p>\n\n<ul>\n<li>The array like object containing the output\ndata of shape (n_samples, n_targets) or (n_samples,)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "learnML.interfaces.IRegression.predict": {"fullname": "learnML.interfaces.IRegression.predict", "modulename": "learnML.interfaces", "qualname": "IRegression.predict", "kind": "function", "doc": "<h3 id=\"predict-the-output-given-the-input\">Predict the output given the input.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The array like object containing the input\ndata of shape (n_samples, n_features)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The array like object containing the output\ndata of shape (n_samples, n_targets) or (n_samples,)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.interfaces.IRegression.score": {"fullname": "learnML.interfaces.IRegression.score", "modulename": "learnML.interfaces", "qualname": "IRegression.score", "kind": "function", "doc": "<h3 id=\"calculate-the-score-of-the-model\">Calculate the score of the model.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The array like object containing the input\ndata of shape (n_samples, n_features)</li>\n</ul>\n\n<p><code>Y</code> : np.ndarray</p>\n\n<ul>\n<li>The array like object containing the output\ndata of shape (n_samples, n_targets) or (n_samples,)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.float64</code></p>\n\n<ul>\n<li>The score of the model</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "learnML.interfaces.IRegression.get_cost_history": {"fullname": "learnML.interfaces.IRegression.get_cost_history", "modulename": "learnML.interfaces", "qualname": "IRegression.get_cost_history", "kind": "function", "doc": "<h3 id=\"return-the-history-of-the-cost-function\">Return the history of the cost function.</h3>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The history of the cost function</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.interfaces.IRegression.get_parameter_history": {"fullname": "learnML.interfaces.IRegression.get_parameter_history", "modulename": "learnML.interfaces", "qualname": "IRegression.get_parameter_history", "kind": "function", "doc": "<h3 id=\"return-the-history-of-the-parameters\">Return the history of the parameters.</h3>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The history of the parameters</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.interfaces.IRegression.get_weights": {"fullname": "learnML.interfaces.IRegression.get_weights", "modulename": "learnML.interfaces", "qualname": "IRegression.get_weights", "kind": "function", "doc": "<h3 id=\"return-the-weights\">Return the weights.</h3>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The weights</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.interfaces.IRegression.get_intercept": {"fullname": "learnML.interfaces.IRegression.get_intercept", "modulename": "learnML.interfaces", "qualname": "IRegression.get_intercept", "kind": "function", "doc": "<h3 id=\"return-the-intercept\">Return the intercept.</h3>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.float64</code></p>\n\n<ul>\n<li>The intercept</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing": {"fullname": "learnML.preprocessing", "modulename": "learnML.preprocessing", "kind": "module", "doc": "<p></p>\n"}, "learnML.preprocessing.ZScoreNormalization": {"fullname": "learnML.preprocessing.ZScoreNormalization", "modulename": "learnML.preprocessing", "qualname": "ZScoreNormalization", "kind": "class", "doc": "<h1 id=\"z-score-normalization\">Z-Score Normalization</h1>\n\n<p>This class provides Z-score normalization (also known as standardization) for input data. Z-score normalization transforms data so that it has a mean of 0 and a standard deviation of 1. This is achieved by subtracting the mean of each column and dividing by the standard deviation of each column.</p>\n\n<hr />\n\n<h2 id=\"mathematical-explanation\">Mathematical Explanation</h2>\n\n<p>Z-score normalization (standardization) is a statistical technique used to transform features in a dataset to have a mean of 0 and a standard deviation of 1. This transformation is applied column-wise to the features.</p>\n\n<p>For a given feature <code>X</code> with values <code>x_1, x_2, ..., x_n</code>, the Z-score normalization is calculated as follows:</p>\n\n<ul>\n<li>Calculate the mean (<code>\u03bc</code>) of the feature:</li>\n</ul>\n\n<pre><code>\u03bc = (x_1 + x_2 + ... + x_n) / n\n</code></pre>\n\n<ul>\n<li>Calculate the standard deviation (<code>\u03c3</code>) of the feature:</li>\n</ul>\n\n<pre><code>\u03c3 = sqrt(((x_1 - \u03bc)^2 + (x_2 - \u03bc)^2 + ... + (x_n - \u03bc)^2) / n)\n</code></pre>\n\n<ul>\n<li>For each value <code>x_i</code> in the feature, compute the Z-score:</li>\n</ul>\n\n<pre><code>z_i = (x_i - \u03bc) / \u03c3\n</code></pre>\n\n<p>The Z-score normalization ensures that the transformed values have a mean of 0 and a standard deviation of 1, which is beneficial for many machine learning algorithms that assume standardized data. It also helps in comparing and visualizing features on a similar scale, avoiding potential issues caused by features with different scales.</p>\n\n<p>The <code>ZScoreNormalization</code> class provides an implementation of this mathematical process, allowing you to easily normalize your data using Z-score normalization.</p>\n\n<hr />\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>To use the <code>ZScoreNormalization</code> class, follow the general steps below:</p>\n\n<ol>\n<li>Import the class from the <code>learnML.preprocessing</code> module</li>\n<li>Create an instance of the <code>ZScoreNormalization</code> class</li>\n<li>Call the <code>fit_transform</code> method to fit the data and transform it</li>\n<li>Call the <code>inverse_transform</code> method to inverse the transformation</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">learnML.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">ZScoreNormalization</span>\n\n<span class=\"c1\"># Create an instance of the ZScoreNormalization class</span>\n<span class=\"n\">z_score_normalization</span> <span class=\"o\">=</span> <span class=\"n\">ZScoreNormalization</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Fit and transform the data</span>\n<span class=\"n\">normalized_data</span> <span class=\"o\">=</span> <span class=\"n\">z_score_normalization</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Inverse the transformation</span>\n<span class=\"n\">inverse_data</span> <span class=\"o\">=</span> <span class=\"n\">z_score_normalization</span><span class=\"o\">.</span><span class=\"n\">inverse_transform</span><span class=\"p\">(</span><span class=\"n\">normalized_data</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<hr />\n", "bases": "learnML.interfaces.ifeature_engineering.IFeatureEngineering"}, "learnML.preprocessing.ZScoreNormalization.__init__": {"fullname": "learnML.preprocessing.ZScoreNormalization.__init__", "modulename": "learnML.preprocessing", "qualname": "ZScoreNormalization.__init__", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>data</code> : np.ndarray</p>\n\n<ul>\n<li>The data to be normalized</li>\n</ul>\n\n<p><code>index</code> : int, list, range, optional</p>\n\n<ul>\n<li>The index of the columns to be normalized</li>\n<li>If <code>index</code> is an integer, then the column at that index will be normalized</li>\n<li>If <code>index</code> is a list, then the columns at the indexes in the list will be normalized</li>\n<li>If <code>index</code> is a range, then the columns at the indexes in the range will be normalized</li>\n<li>If <code>index</code> is None, then all columns will be normalized</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "learnML.preprocessing.ZScoreNormalization.fit": {"fullname": "learnML.preprocessing.ZScoreNormalization.fit", "modulename": "learnML.preprocessing", "qualname": "ZScoreNormalization.fit", "kind": "function", "doc": "<h3 id=\"fit-the-data-by-calculating-the-mean-and-standard-deviation-of-each-column\">Fit the data by calculating the mean and standard deviation of each column</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>data</code> : np.ndarray, optional</p>\n\n<ul>\n<li>The data to be normalized, by default None</li>\n<li>If <code>data</code> is None, then the data passed to the constructor will be used</li>\n<li>If <code>data</code> is not None, then the data passed to the constructor will be ignored</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.ZScoreNormalization.transform": {"fullname": "learnML.preprocessing.ZScoreNormalization.transform", "modulename": "learnML.preprocessing", "qualname": "ZScoreNormalization.transform", "kind": "function", "doc": "<h3 id=\"transform-the-data-by-normalizing-it\">Transform the data by normalizing it</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>data</code> : np.ndarray</p>\n\n<ul>\n<li>The data to be normalized</li>\n<li>The data must have the same number of columns as the data passed to the constructor</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The normalized data</li>\n<li>The normalized data will have the same shape as the input data</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"fullname": "learnML.preprocessing.ZScoreNormalization.fit_transform", "modulename": "learnML.preprocessing", "qualname": "ZScoreNormalization.fit_transform", "kind": "function", "doc": "<h3 id=\"fit-and-transform-the-data-by-normalizing-it\">Fit and transform the data by normalizing it</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>data</code> : np.ndarray, optional</p>\n\n<ul>\n<li>The data to be normalized, by default None</li>\n<li>If <code>data</code> is None, then the data passed to the constructor will be used</li>\n<li>If <code>data</code> is not None, then the data passed to the constructor will be ignored</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The normalized data after fitting and transforming</li>\n<li>The normalized data will have the same shape as the input data</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"fullname": "learnML.preprocessing.ZScoreNormalization.inverse_transform", "modulename": "learnML.preprocessing", "qualname": "ZScoreNormalization.inverse_transform", "kind": "function", "doc": "<h3 id=\"inverse-the-data-by-denormalizing-it\">Inverse the data by denormalizing it</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>data</code> : np.ndarray</p>\n\n<ul>\n<li>The data to be inverse</li>\n<li>The data must have the same number of columns as the data passed to the constructor</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The inverse data after denormalizing</li>\n<li>The inverse data will have the same shape as the input data</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.PolynomialFeatures": {"fullname": "learnML.preprocessing.PolynomialFeatures", "modulename": "learnML.preprocessing", "qualname": "PolynomialFeatures", "kind": "class", "doc": "<h1 id=\"polynomial-feature-generator-class\">Polynomial Feature Generator Class</h1>\n\n<p>The <code>PolynomialFeatures</code> class is designed to generate polynomial features from input data. Polynomial features are derived from the original features by raising them to various degrees. This process can help capture non-linear relationships between features and improve the performance of machine learning algorithms.</p>\n\n<hr />\n\n<h2 id=\"mathematical-explanation\">Mathematical Explanation</h2>\n\n<p>Polynomial features are derived from the original features by raising them to various degrees. For example, if we have a feature <code>x</code> with values <code>x_1, x_2, ..., x_n</code>, then the polynomial features of <code>x</code> with degree 2 are <code>x_1^2, x_2^2, ..., x_n^2</code>. The polynomial features of <code>x</code> with degree 3 are <code>x_1^3, x_2^3, ..., x_n^3</code>, and so on.</p>\n\n<p>The <code>PolynomialFeatures</code> class provides an implementation of this mathematical process, allowing you to easily generate polynomial features from your data.</p>\n\n<hr />\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>To use the <code>PolynomialFeatures</code> class, follow the general steps below:</p>\n\n<ol>\n<li>Import the class from the <code>learnML.preprocessing</code> module</li>\n<li>Create an instance of the <code>PolynomialFeatures</code> class</li>\n<li>Call the <code>transform</code> method to transform the data</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">learnML.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">PolynomialFeatures</span>\n\n<span class=\"c1\"># Create an instance of the PolynomialFeatures class</span>\n<span class=\"n\">polynomial_features</span> <span class=\"o\">=</span> <span class=\"n\">PolynomialFeatures</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">degree</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Transform the data</span>\n<span class=\"n\">polynomial_features</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<hr />\n"}, "learnML.preprocessing.PolynomialFeatures.__init__": {"fullname": "learnML.preprocessing.PolynomialFeatures.__init__", "modulename": "learnML.preprocessing", "qualname": "PolynomialFeatures.__init__", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>data</code> : np.ndarray</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features)</li>\n</ul>\n\n<p><code>degree</code> : Union[int, List[int], Dict[int, Union[int, List[int]]]], optional</p>\n\n<ul>\n<li>The degree of the polynomial, by default 2</li>\n<li>It can be a single integer, a list of integers or a dictionary of integers and lists of integers</li>\n<li>If it is a single integer, then the polynomial features of all the features of the input array will be generated with the given degree from 1 to the given degree</li>\n<li>If it is a list of integers, then the polynomial features of all the features of the input array will be generated with the given degrees</li>\n<li>If it is a dictionary of integers and lists of integers, then for each key-value pair in the dictionary, the polynomial features of the features at the key index of the input array will be generated with the given degrees in the list</li>\n</ul>\n\n<h2 id=\"degree\">Degree</h2>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">degree</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"c1\"># Generate polynomial features of degree 1 and 2 for all the features</span>\n\n<span class=\"n\">degree</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"c1\"># Generate polynomial features of degree 2, 3 and 6 for all the features</span>\n\n<span class=\"n\">degree</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}</span>\n<span class=\"c1\"># Generate polynomial features of degree 2, 3 and 6 for the first feature</span>\n<span class=\"c1\"># Generate polynomial features of degree 1 and 2 for the second feature</span>\n</code></pre>\n</div>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">degree</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span>)</span>"}, "learnML.preprocessing.PolynomialFeatures.transform": {"fullname": "learnML.preprocessing.PolynomialFeatures.transform", "modulename": "learnML.preprocessing", "qualname": "PolynomialFeatures.transform", "kind": "function", "doc": "<h3 id=\"transform-the-input-array-into-polynomial-features\">Transform the input array into polynomial features</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>data</code> : np.ndarray, optional</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features), by default None</li>\n<li>If None, then the input array passed to the constructor will be used</li>\n<li>If not None, then the input array passed to the constructor will be ignored</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The polynomial features of the input array of shape (n_samples, n_features)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.OneHotEncoder": {"fullname": "learnML.preprocessing.OneHotEncoder", "modulename": "learnML.preprocessing", "qualname": "OneHotEncoder", "kind": "class", "doc": "<h1 id=\"one-hot-encoding-feature-engineering-class\">One-hot Encoding Feature Engineering Class</h1>\n\n<p>The <code>OneHotEncoder</code> class is used to one-hot encode categorical columns in a dataset. It is a subclass of the <code>IFeatureEngineering</code> class.</p>\n\n<hr />\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>To use the <code>OneHotEncoder</code> class, follow the general steps below:</p>\n\n<ol>\n<li>Import the class from the <code>learnML.preprocessing</code> module</li>\n<li>Create an instance of the <code>OneHotEncoder</code> class</li>\n<li>Call the <code>fit_transform</code> method to fit the data and transform it</li>\n<li>Call the <code>inverse_transform</code> method to inverse the transformation</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">learnML.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">OneHotEncoder</span>\n\n<span class=\"c1\"># Create an instance of the OneHotEncoder class</span>\n<span class=\"n\">one_hot_encoder</span> <span class=\"o\">=</span> <span class=\"n\">OneHotEncoder</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Fit and transform the data</span>\n<span class=\"n\">encoded_data</span> <span class=\"o\">=</span> <span class=\"n\">one_hot_encoder</span><span class=\"o\">.</span><span class=\"n\">fit_transform</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Inverse the transformation</span>\n<span class=\"n\">inverse_data</span> <span class=\"o\">=</span> <span class=\"n\">one_hot_encoder</span><span class=\"o\">.</span><span class=\"n\">inverse_transform</span><span class=\"p\">(</span><span class=\"n\">encoded_data</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<hr />\n", "bases": "learnML.interfaces.ifeature_engineering.IFeatureEngineering"}, "learnML.preprocessing.OneHotEncoder.__init__": {"fullname": "learnML.preprocessing.OneHotEncoder.__init__", "modulename": "learnML.preprocessing", "qualname": "OneHotEncoder.__init__", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>data</code> : np.ndarray</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features)</li>\n</ul>\n\n<p><code>indexes</code> : int, list, range, optional</p>\n\n<ul>\n<li>The index of the columns to be normalized</li>\n<li>If <code>index</code> is an integer, then the column at that index will be normalized</li>\n<li>If <code>index</code> is a list, then the columns at the indexes in the list will be normalized</li>\n<li>If <code>index</code> is a range, then the columns at the indexes in the range will be normalized</li>\n<li>If <code>index</code> is None, then all columns will be normalized</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">indexes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "learnML.preprocessing.OneHotEncoder.fit": {"fullname": "learnML.preprocessing.OneHotEncoder.fit", "modulename": "learnML.preprocessing", "qualname": "OneHotEncoder.fit", "kind": "function", "doc": "<h3 id=\"fit-the-data-to-the-encoder\">Fit the data to the encoder</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>data</code> : np.ndarray, optional</p>\n\n<ul>\n<li>The data to be fitted</li>\n<li>If <code>data</code> is None, then the data passed to the constructor will be used</li>\n<li>If <code>data</code> is not None, then the data passed to the constructor will be ignored</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.OneHotEncoder.transform": {"fullname": "learnML.preprocessing.OneHotEncoder.transform", "modulename": "learnML.preprocessing", "qualname": "OneHotEncoder.transform", "kind": "function", "doc": "<h3 id=\"transform-the-data-using-the-encoder\">Transform the data using the encoder</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>data</code> : np.ndarray, optional</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features),</li>\n<li>If <code>data</code> is None, then the data passed to the constructor will be used</li>\n<li>If <code>data</code> is not None, then the data passed to the constructor will be ignored</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The transformed array of shape (n_samples, n_features)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"fullname": "learnML.preprocessing.OneHotEncoder.inverse_transform", "modulename": "learnML.preprocessing", "qualname": "OneHotEncoder.inverse_transform", "kind": "function", "doc": "<h3 id=\"inverse-transform-the-data-using-the-encoder\">Inverse transform the data using the encoder</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>data</code> : np.ndarray, optional</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features)</li>\n<li>If <code>data</code> is None, then the data passed to the constructor will be used</li>\n<li>If <code>data</code> is not None, then the data passed to the constructor will be ignored</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The inverse transformed array of shape (n_samples, n_features)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"fullname": "learnML.preprocessing.OneHotEncoder.fit_transform", "modulename": "learnML.preprocessing", "qualname": "OneHotEncoder.fit_transform", "kind": "function", "doc": "<h3 id=\"fit-and-transform-the-data-using-the-encoder\">Fit and transform the data using the encoder</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>data</code> : np.ndarray, optional</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features),</li>\n<li>If <code>data</code> is None, then the data passed to the constructor will be used</li>\n<li>If <code>data</code> is not None, then the data passed to the constructor will be ignored</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The transformed array of shape (n_samples, n_features)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.OneHotEncoder.get_categories": {"fullname": "learnML.preprocessing.OneHotEncoder.get_categories", "modulename": "learnML.preprocessing", "qualname": "OneHotEncoder.get_categories", "kind": "function", "doc": "<h3 id=\"get-the-categories-for-the-categorical-columns\">Get the categories for the categorical columns</h3>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>list</code></p>\n\n<ul>\n<li>The categories for the categorical columns</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"fullname": "learnML.preprocessing.OneHotEncoder.get_encodings", "modulename": "learnML.preprocessing", "qualname": "OneHotEncoder.get_encodings", "kind": "function", "doc": "<h3 id=\"get-the-encodings-for-the-categorical-columns\">Get the encodings for the categorical columns</h3>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>dict</code></p>\n\n<ul>\n<li>Dictionary containing the encodings of categorical columns</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.train_test_split": {"fullname": "learnML.preprocessing.train_test_split", "modulename": "learnML.preprocessing.train_test_split", "kind": "module", "doc": "<p></p>\n"}, "learnML.preprocessing.KFoldSplit": {"fullname": "learnML.preprocessing.KFoldSplit", "modulename": "learnML.preprocessing", "qualname": "KFoldSplit", "kind": "class", "doc": "<h1 id=\"kfoldsplit\">KFoldSplit</h1>\n\n<p>Class for splitting the data into training and testing\nsets using k-fold cross validation.</p>\n\n<hr />\n\n<h2 id=\"mathematical-approach\">Mathematical Approach</h2>\n\n<p>Let <code>X</code> be the input features of shape (n_samples, n_features) and\n<code>Y</code> be the output features of shape (n_samples, n_outputs).</p>\n\n<p>Let <code>k</code> be the number of folds.</p>\n\n<p>Let <code>m</code> be the number of samples.</p>\n\n<p>Then the data is split into <code>k</code> folds.</p>\n\n<p>The <code>i</code>th fold is used as the testing set and the remaining folds are used as the training set.</p>\n\n<p>The data is split into <code>k</code> folds using the following steps:</p>\n\n<ol>\n<li>Shuffle the indices of the data points.</li>\n<li>Use the shuffled indices to rearrange X and Y.</li>\n<li>Split the data into <code>k</code> folds.</li>\n<li>Repeat steps 1 to 3 <code>k</code> times.</li>\n</ol>\n\n<hr />\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>To split the data into training and testing sets using k-fold cross validation,\nfollow the steps given below:</p>\n\n<ol>\n<li>Import the <code>KFoldSplit</code> class from <code>learnML.preprocessing</code> module.</li>\n<li>Create an instance of the <code>KFoldSplit</code> class.</li>\n<li>Call the <code>split</code> method of the instance created in step 2.</li>\n<li>Call the <code>get_fold</code> method of the instance created in step 2 to get the training and testing sets.</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">learnML.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">KFoldSplit</span>\n\n<span class=\"c1\"># Create an instance of the KFoldSplit class</span>\n<span class=\"n\">kfold</span> <span class=\"o\">=</span> <span class=\"n\">KFoldSplit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Split the data into training and testing sets</span>\n<span class=\"n\">kfold</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get the training and testing sets</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">Y_train</span><span class=\"p\">,</span> <span class=\"n\">Y_test</span> <span class=\"o\">=</span> <span class=\"n\">kfold</span><span class=\"o\">.</span><span class=\"n\">get_fold</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<hr />\n"}, "learnML.preprocessing.KFoldSplit.__init__": {"fullname": "learnML.preprocessing.KFoldSplit.__init__", "modulename": "learnML.preprocessing", "qualname": "KFoldSplit.__init__", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : Union[np.ndarray, pd.DataFrame, list]</p>\n\n<ul>\n<li>The input features of shape (n_samples, n_features)</li>\n</ul>\n\n<p><code>Y</code> : Union[np.ndarray, pd.DataFrame, list], optional</p>\n\n<ul>\n<li>The output features of shape (n_samples, n_outputs), by default None</li>\n<li>If None, then the data is split into k folds without the output features</li>\n</ul>\n\n<p><code>k</code> : int, optional</p>\n\n<ul>\n<li>The number of folds, by default 5</li>\n<li>Must be greater than 1</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span>)</span>"}, "learnML.preprocessing.KFoldSplit.k": {"fullname": "learnML.preprocessing.KFoldSplit.k", "modulename": "learnML.preprocessing", "qualname": "KFoldSplit.k", "kind": "variable", "doc": "<p></p>\n"}, "learnML.preprocessing.KFoldSplit.split": {"fullname": "learnML.preprocessing.KFoldSplit.split", "modulename": "learnML.preprocessing", "qualname": "KFoldSplit.split", "kind": "function", "doc": "<h3 id=\"split-the-data-into-training-and-testing-sets-using-k-fold-cross-validation\">Split the data into training and testing sets using k-fold cross validation.</h3>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.KFoldSplit.get_fold": {"fullname": "learnML.preprocessing.KFoldSplit.get_fold", "modulename": "learnML.preprocessing", "qualname": "KFoldSplit.get_fold", "kind": "function", "doc": "<h3 id=\"get-the-training-and-testing-sets-for-the-nth-fold\">Get the training and testing sets for the nth fold.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>nthFold</code> : int, optional</p>\n\n<ul>\n<li>The index of the fold, by default 0</li>\n<li>Must be between 0 and k - 1</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>Union[\n    Tuple[np.ndarray, np.ndarray],\n    Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]\n]</code></p>\n\n<ul>\n<li>The training and testing sets</li>\n<li>If Y is None, then the output is (X_train, X_test)</li>\n<li>Else, the output is (X_train, X_test, Y_train, Y_test)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">nthFold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.OneLeaveOutSplit": {"fullname": "learnML.preprocessing.OneLeaveOutSplit", "modulename": "learnML.preprocessing", "qualname": "OneLeaveOutSplit", "kind": "class", "doc": "<h1 id=\"oneleaveoutsplit\">OneLeaveOutSplit</h1>\n\n<p>Class for splitting the data into training and testing\nsets using leave-one-out cross validation.</p>\n\n<hr />\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>To use the <code>OneLeaveOutSplit</code> class, follow the following steps:</p>\n\n<ol>\n<li>Import the <code>OneLeaveOutSplit</code> class from <code>learnML.preprocessing</code> module.</li>\n<li>Create an instance of the <code>OneLeaveOutSplit</code> class.</li>\n<li>Call the <code>split</code> method of the instance created in step 2.</li>\n<li>Call the <code>get_fold</code> method of the instance created in step 2 to get the training and testing sets.</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">learnML.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">OneLeaveOutSplit</span>\n\n<span class=\"c1\"># Create an instance of the OneLeaveOutSplit class</span>\n<span class=\"n\">loo</span> <span class=\"o\">=</span> <span class=\"n\">OneLeaveOutSplit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Split the data into training and testing sets</span>\n<span class=\"n\">loo</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get the training and testing sets</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">Y_train</span><span class=\"p\">,</span> <span class=\"n\">Y_test</span> <span class=\"o\">=</span> <span class=\"n\">loo</span><span class=\"o\">.</span><span class=\"n\">get_fold</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<hr />\n"}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"fullname": "learnML.preprocessing.OneLeaveOutSplit.__init__", "modulename": "learnML.preprocessing", "qualname": "OneLeaveOutSplit.__init__", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : Union[np.ndarray, pd.DataFrame, list]</p>\n\n<ul>\n<li>The input features of shape (n_samples, n_features)</li>\n</ul>\n\n<p><code>Y</code> : Union[np.ndarray, pd.DataFrame, list], optional</p>\n\n<ul>\n<li>The output features of shape (n_samples, n_outputs), by default None</li>\n<li>If None, then the data is split without the output features</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "learnML.preprocessing.OneLeaveOutSplit.randomize": {"fullname": "learnML.preprocessing.OneLeaveOutSplit.randomize", "modulename": "learnML.preprocessing", "qualname": "OneLeaveOutSplit.randomize", "kind": "function", "doc": "<h3 id=\"randomize-the-data\">Randomize the data.</h3>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"fullname": "learnML.preprocessing.OneLeaveOutSplit.get_fold", "modulename": "learnML.preprocessing", "qualname": "OneLeaveOutSplit.get_fold", "kind": "function", "doc": "<h3 id=\"get-the-training-and-testing-sets-for-the-nth-fold\">Get the training and testing sets for the nth fold.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>nthFold</code> : int, optional</p>\n\n<ul>\n<li>The index of the fold, by default 0</li>\n<li>Must be between 0 and k - 1</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>Union[\n    Tuple[np.ndarray, np.ndarray],\n    Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]\n]</code></p>\n\n<ul>\n<li>The training and testing sets</li>\n<li>If Y is None, then the output is (X_train, X_test)</li>\n<li>Else, the output is (X_train, X_test, Y_train, Y_test)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">nthFold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.train_test_split.train_test_split": {"fullname": "learnML.preprocessing.train_test_split.train_test_split", "modulename": "learnML.preprocessing.train_test_split", "qualname": "train_test_split", "kind": "function", "doc": "<h3 id=\"split-the-data-into-training-and-testing-sets\">Split the data into training and testing sets.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The input features of shape (n_samples, n_features)</li>\n</ul>\n\n<p><code>Y</code> : np.ndarray</p>\n\n<ul>\n<li>The output features of shape (n_samples, n_outputs)</li>\n</ul>\n\n<p><code>test_size</code> : float, optional</p>\n\n<ul>\n<li>The size of the testing set, by default 0.2</li>\n<li>Must be between 0 and 1</li>\n</ul>\n\n<p><code>random_state</code> : int, optional</p>\n\n<ul>\n<li>The random state, by default 0</li>\n<li>Used to shuffle the data</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]</code></p>\n\n<ul>\n<li>The training and testing sets\n[X_train, X_test, Y_train, Y_test]</li>\n</ul>\n\n<ul>\n<li>X_train : np.ndarray\n<ul>\n<li>The input features of the training set</li>\n</ul></li>\n<li>X_test : np.ndarray\n<ul>\n<li>The input features of the testing set</li>\n</ul></li>\n<li>Y_train : np.ndarray\n<ul>\n<li>The output features of the training set</li>\n</ul></li>\n<li>Y_test : np.ndarray\n<ul>\n<li>The output features of the testing set</li>\n</ul></li>\n</ul>\n\n<hr />\n\n<h2 id=\"usage\">Usage</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">learnML.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">Y_train</span><span class=\"p\">,</span> <span class=\"n\">Y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">test_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.train_test_split.KFoldSplit": {"fullname": "learnML.preprocessing.train_test_split.KFoldSplit", "modulename": "learnML.preprocessing.train_test_split", "qualname": "KFoldSplit", "kind": "class", "doc": "<h1 id=\"kfoldsplit\">KFoldSplit</h1>\n\n<p>Class for splitting the data into training and testing\nsets using k-fold cross validation.</p>\n\n<hr />\n\n<h2 id=\"mathematical-approach\">Mathematical Approach</h2>\n\n<p>Let <code>X</code> be the input features of shape (n_samples, n_features) and\n<code>Y</code> be the output features of shape (n_samples, n_outputs).</p>\n\n<p>Let <code>k</code> be the number of folds.</p>\n\n<p>Let <code>m</code> be the number of samples.</p>\n\n<p>Then the data is split into <code>k</code> folds.</p>\n\n<p>The <code>i</code>th fold is used as the testing set and the remaining folds are used as the training set.</p>\n\n<p>The data is split into <code>k</code> folds using the following steps:</p>\n\n<ol>\n<li>Shuffle the indices of the data points.</li>\n<li>Use the shuffled indices to rearrange X and Y.</li>\n<li>Split the data into <code>k</code> folds.</li>\n<li>Repeat steps 1 to 3 <code>k</code> times.</li>\n</ol>\n\n<hr />\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>To split the data into training and testing sets using k-fold cross validation,\nfollow the steps given below:</p>\n\n<ol>\n<li>Import the <code>KFoldSplit</code> class from <code>learnML.preprocessing</code> module.</li>\n<li>Create an instance of the <code>KFoldSplit</code> class.</li>\n<li>Call the <code>split</code> method of the instance created in step 2.</li>\n<li>Call the <code>get_fold</code> method of the instance created in step 2 to get the training and testing sets.</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">learnML.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">KFoldSplit</span>\n\n<span class=\"c1\"># Create an instance of the KFoldSplit class</span>\n<span class=\"n\">kfold</span> <span class=\"o\">=</span> <span class=\"n\">KFoldSplit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Split the data into training and testing sets</span>\n<span class=\"n\">kfold</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get the training and testing sets</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">Y_train</span><span class=\"p\">,</span> <span class=\"n\">Y_test</span> <span class=\"o\">=</span> <span class=\"n\">kfold</span><span class=\"o\">.</span><span class=\"n\">get_fold</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<hr />\n"}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"fullname": "learnML.preprocessing.train_test_split.KFoldSplit.__init__", "modulename": "learnML.preprocessing.train_test_split", "qualname": "KFoldSplit.__init__", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : Union[np.ndarray, pd.DataFrame, list]</p>\n\n<ul>\n<li>The input features of shape (n_samples, n_features)</li>\n</ul>\n\n<p><code>Y</code> : Union[np.ndarray, pd.DataFrame, list], optional</p>\n\n<ul>\n<li>The output features of shape (n_samples, n_outputs), by default None</li>\n<li>If None, then the data is split into k folds without the output features</li>\n</ul>\n\n<p><code>k</code> : int, optional</p>\n\n<ul>\n<li>The number of folds, by default 5</li>\n<li>Must be greater than 1</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span>)</span>"}, "learnML.preprocessing.train_test_split.KFoldSplit.k": {"fullname": "learnML.preprocessing.train_test_split.KFoldSplit.k", "modulename": "learnML.preprocessing.train_test_split", "qualname": "KFoldSplit.k", "kind": "variable", "doc": "<p></p>\n"}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"fullname": "learnML.preprocessing.train_test_split.KFoldSplit.split", "modulename": "learnML.preprocessing.train_test_split", "qualname": "KFoldSplit.split", "kind": "function", "doc": "<h3 id=\"split-the-data-into-training-and-testing-sets-using-k-fold-cross-validation\">Split the data into training and testing sets using k-fold cross validation.</h3>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"fullname": "learnML.preprocessing.train_test_split.KFoldSplit.get_fold", "modulename": "learnML.preprocessing.train_test_split", "qualname": "KFoldSplit.get_fold", "kind": "function", "doc": "<h3 id=\"get-the-training-and-testing-sets-for-the-nth-fold\">Get the training and testing sets for the nth fold.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>nthFold</code> : int, optional</p>\n\n<ul>\n<li>The index of the fold, by default 0</li>\n<li>Must be between 0 and k - 1</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>Union[\n    Tuple[np.ndarray, np.ndarray],\n    Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]\n]</code></p>\n\n<ul>\n<li>The training and testing sets</li>\n<li>If Y is None, then the output is (X_train, X_test)</li>\n<li>Else, the output is (X_train, X_test, Y_train, Y_test)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">nthFold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"fullname": "learnML.preprocessing.train_test_split.OneLeaveOutSplit", "modulename": "learnML.preprocessing.train_test_split", "qualname": "OneLeaveOutSplit", "kind": "class", "doc": "<h1 id=\"oneleaveoutsplit\">OneLeaveOutSplit</h1>\n\n<p>Class for splitting the data into training and testing\nsets using leave-one-out cross validation.</p>\n\n<hr />\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>To use the <code>OneLeaveOutSplit</code> class, follow the following steps:</p>\n\n<ol>\n<li>Import the <code>OneLeaveOutSplit</code> class from <code>learnML.preprocessing</code> module.</li>\n<li>Create an instance of the <code>OneLeaveOutSplit</code> class.</li>\n<li>Call the <code>split</code> method of the instance created in step 2.</li>\n<li>Call the <code>get_fold</code> method of the instance created in step 2 to get the training and testing sets.</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">learnML.preprocessing</span> <span class=\"kn\">import</span> <span class=\"n\">OneLeaveOutSplit</span>\n\n<span class=\"c1\"># Create an instance of the OneLeaveOutSplit class</span>\n<span class=\"n\">loo</span> <span class=\"o\">=</span> <span class=\"n\">OneLeaveOutSplit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Split the data into training and testing sets</span>\n<span class=\"n\">loo</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get the training and testing sets</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">Y_train</span><span class=\"p\">,</span> <span class=\"n\">Y_test</span> <span class=\"o\">=</span> <span class=\"n\">loo</span><span class=\"o\">.</span><span class=\"n\">get_fold</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<hr />\n"}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"fullname": "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__", "modulename": "learnML.preprocessing.train_test_split", "qualname": "OneLeaveOutSplit.__init__", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : Union[np.ndarray, pd.DataFrame, list]</p>\n\n<ul>\n<li>The input features of shape (n_samples, n_features)</li>\n</ul>\n\n<p><code>Y</code> : Union[np.ndarray, pd.DataFrame, list], optional</p>\n\n<ul>\n<li>The output features of shape (n_samples, n_outputs), by default None</li>\n<li>If None, then the data is split without the output features</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"fullname": "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize", "modulename": "learnML.preprocessing.train_test_split", "qualname": "OneLeaveOutSplit.randomize", "kind": "function", "doc": "<h3 id=\"randomize-the-data\">Randomize the data.</h3>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"fullname": "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold", "modulename": "learnML.preprocessing.train_test_split", "qualname": "OneLeaveOutSplit.get_fold", "kind": "function", "doc": "<h3 id=\"get-the-training-and-testing-sets-for-the-nth-fold\">Get the training and testing sets for the nth fold.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>nthFold</code> : int, optional</p>\n\n<ul>\n<li>The index of the fold, by default 0</li>\n<li>Must be between 0 and k - 1</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>Union[\n    Tuple[np.ndarray, np.ndarray],\n    Tuple[np.ndarray, np.ndarray, np.ndarray, np.ndarray]\n]</code></p>\n\n<ul>\n<li>The training and testing sets</li>\n<li>If Y is None, then the output is (X_train, X_test)</li>\n<li>Else, the output is (X_train, X_test, Y_train, Y_test)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">nthFold</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "learnML.regression": {"fullname": "learnML.regression", "modulename": "learnML.regression", "kind": "module", "doc": "<p></p>\n"}, "learnML.regression.UnivariateLinearRegression": {"fullname": "learnML.regression.UnivariateLinearRegression", "modulename": "learnML.regression", "qualname": "UnivariateLinearRegression", "kind": "class", "doc": "<h1 id=\"univariate-linear-regression-model\">Univariate Linear Regression model.</h1>\n\n<p>Linear regression is a fundamental supervised machine learning algorithm that models the relationship between a dependent variable and a single independent variable. It approximates this relationship using a linear equation. Univariate Linear Regression is particularly useful when there is a clear linear correlation between the input and output variables.</p>\n\n<hr />\n\n<h2 id=\"mathematical-approach\">Mathematical Approach</h2>\n\n<p>Univariate Linear Regression aims to find the best-fitting line that predicts the output variable based on the input feature. The linear equation is represented as:</p>\n\n<pre><code>y = mx + b\n</code></pre>\n\n<p>Where:</p>\n\n<ul>\n<li><code>y</code> is the predicted output (target variable).</li>\n<li><code>x</code> is the input feature (independent variable).</li>\n<li><code>m</code> is the slope of the line (weight).</li>\n<li><code>b</code> is the y-intercept.</li>\n</ul>\n\n<p>The goal is to determine the optimal values of <code>m</code> and <code>b</code> that minimize the difference between predicted values and actual target values.</p>\n\n<hr />\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>To utilize the Univariate Linear Regression model, follow these steps:</p>\n\n<ol>\n<li>Import the <code>UnivariateLinearRegression</code> class from the appropriate module.</li>\n<li>Create an instance of the <code>UnivariateLinearRegression</code> class, specifying hyperparameters.</li>\n<li>Fit the model to your training data using the <code>fit</code> method.</li>\n<li>Make predictions on new data using the <code>predict</code> method.</li>\n<li>Evaluate the model's performance using the <code>score</code> method.</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">learnML.regression</span> <span class=\"kn\">import</span> <span class=\"n\">UnivariateLinearRegression</span>\n\n<span class=\"c1\"># Create an instance of UnivariateLinearRegression</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">UnivariateLinearRegression</span><span class=\"p\">(</span><span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"n\">n_iterations</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Fit the model to training data</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">Y_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Make predictions on new data</span>\n<span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calculate the model&#39;s score</span>\n<span class=\"n\">model_score</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">Y_test</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<hr />\n\n<h2 id=\"advantages\">Advantages</h2>\n\n<ul>\n<li>Easy to implement</li>\n<li>Easy to interpret the output</li>\n<li>Computationally cheap</li>\n</ul>\n\n<h2 id=\"disadvantages\">Disadvantages</h2>\n\n<ul>\n<li>Poor performance on non-linear data</li>\n<li>Sensitive to outliers</li>\n<li>Sensitive to overfitting</li>\n</ul>\n\n<hr />\n", "bases": "learnML.interfaces.iregression.IRegression"}, "learnML.regression.UnivariateLinearRegression.__init__": {"fullname": "learnML.regression.UnivariateLinearRegression.__init__", "modulename": "learnML.regression", "qualname": "UnivariateLinearRegression.__init__", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>learning_rate</code> : np.float64, optional</p>\n\n<ul>\n<li>The learning rate, by default 0.001</li>\n<li>The learning rate determines how much the weights are updated at each iteration</li>\n<li>A low learning rate will take longer to converge, but a high learning rate may overshoot the optimal solution</li>\n</ul>\n\n<p><code>n_iterations</code> : int, optional</p>\n\n<ul>\n<li>The number of iterations, by default 1000</li>\n<li>The number of iterations determines how many times the weights are updated</li>\n<li>A higher number of iterations will take longer to converge, but a lower number of iterations may not be enough to converge</li>\n</ul>\n\n<p><code>x_scalar</code> : Union[IFeatureEngineering, List[IFeatureEngineering]], optional</p>\n\n<ul>\n<li>The feature engineering for the input data, by default None</li>\n<li>If a list is provided, the feature engineering will be applied in the order provided</li>\n<li>If a single feature engineering is provided, it will be applied to all input data</li>\n</ul>\n\n<p><code>y_scalar</code> : Union[IFeatureEngineering, List[IFeatureEngineering]], optional</p>\n\n<ul>\n<li>The feature engineering for the output data, by default None</li>\n<li>If a list is provided, the feature engineering will be applied in the order provided</li>\n<li>If a single feature engineering is provided, it will be applied to all output data</li>\n</ul>\n\n<p><code>debug</code> : bool, optional</p>\n\n<ul>\n<li>Whether to print debug messages, by default True</li>\n<li>Debug messages include the cost at each iteration</li>\n</ul>\n\n<p><code>copy_x</code> : bool, optional</p>\n\n<ul>\n<li>Whether to copy the input array, by default True</li>\n<li>If False, the input array will be overwritten</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">n_iterations</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">x_scalar</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">learnML</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ifeature_engineering</span><span class=\"o\">.</span><span class=\"n\">IFeatureEngineering</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">learnML</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ifeature_engineering</span><span class=\"o\">.</span><span class=\"n\">IFeatureEngineering</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y_scalar</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">learnML</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ifeature_engineering</span><span class=\"o\">.</span><span class=\"n\">IFeatureEngineering</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">learnML</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ifeature_engineering</span><span class=\"o\">.</span><span class=\"n\">IFeatureEngineering</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">copy_x</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, "learnML.regression.UnivariateLinearRegression.fit": {"fullname": "learnML.regression.UnivariateLinearRegression.fit", "modulename": "learnML.regression", "qualname": "UnivariateLinearRegression.fit", "kind": "function", "doc": "<h3 id=\"train-the-model-given-x-and-y\">Train the model given X and Y.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The input array of shape (n_samples,)</li>\n</ul>\n\n<p><code>Y</code> : np.ndarray</p>\n\n<ul>\n<li>The output array of shape (n_samples,)</li>\n</ul>\n\n<p><code>w</code> : np.float64, optional</p>\n\n<ul>\n<li>The initial weight, by default 0.0</li>\n</ul>\n\n<p><code>b</code> : np.float64, optional</p>\n\n<ul>\n<li>The initial intercept, by default 0.0</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "learnML.regression.UnivariateLinearRegression.predict": {"fullname": "learnML.regression.UnivariateLinearRegression.predict", "modulename": "learnML.regression", "qualname": "UnivariateLinearRegression.predict", "kind": "function", "doc": "<h3 id=\"return-the-predicted-value-of-y-given-x\">Return the predicted value of y given x.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : Union[np.ndarray, np.float64]</p>\n\n<ul>\n<li>The input value or array of shape (n_samples,)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>Union[np.ndarray, np.float64]</code></p>\n\n<ul>\n<li>The predicted value or array of shape (n_samples,)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "learnML.regression.UnivariateLinearRegression.score": {"fullname": "learnML.regression.UnivariateLinearRegression.score", "modulename": "learnML.regression", "qualname": "UnivariateLinearRegression.score", "kind": "function", "doc": "<h3 id=\"return-the-cost-function-given-x-y-w-and-b\">Return the cost function given X, Y, w, and b.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The input array of shape (n_samples,)</li>\n</ul>\n\n<p><code>Y</code> : np.ndarray</p>\n\n<ul>\n<li>The output array of shape (n_samples,)</li>\n</ul>\n\n<p><code>w</code> : np.float64, optional</p>\n\n<ul>\n<li>The weight, by default None</li>\n</ul>\n\n<p><code>b</code> : np.float64, optional</p>\n\n<ul>\n<li>The intercept, by default None</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.float64</code></p>\n\n<ul>\n<li>The computed cost</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.regression.LinearRegression": {"fullname": "learnML.regression.LinearRegression", "modulename": "learnML.regression", "qualname": "LinearRegression", "kind": "class", "doc": "<h1 id=\"linear-regression-model\">Linear Regression Model</h1>\n\n<p>Linear Regression is a fundamental supervised machine learning algorithm used to model the relationship between one or more independent variables and a continuous target variable. It serves as a cornerstone for predictive modeling and provides insights into how changes in input features affect the target variable. Linear Regression assumes that the target variable can be expressed as a linear combination of the input features, facilitating interpretation and prediction.</p>\n\n<hr />\n\n<h2 id=\"mathematical-approach\">Mathematical Approach</h2>\n\n<p>Linear Regression aims to find the best-fitting linear equation that predicts the target variable. The equation takes the form:</p>\n\n<pre><code>y = b + w1 * x1 + w2 * x2 + ... + wn * xn\n</code></pre>\n\n<p>Where:</p>\n\n<ul>\n<li><code>y</code> is the predicted target variable.</li>\n<li><code>b</code> is the intercept (bias term).</li>\n<li><code>w1, w2, ..., wn</code> are the weights assigned to each input feature <code>x1, x2, ..., xn</code>.</li>\n</ul>\n\n<p>The goal of Linear Regression is to find the optimal values for <code>b</code> and the weights that minimize the difference between predicted and actual target values.</p>\n\n<hr />\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>To use the Linear Regression model, follow these steps:</p>\n\n<ol>\n<li>Import the <code>LinearRegression</code> class from the appropriate module.</li>\n<li>Create an instance of the <code>LinearRegression</code> class, specifying hyperparameters.</li>\n<li>Fit the model to your training data using the <code>fit</code> method.</li>\n<li>Make predictions on new data using the <code>predict</code> method.</li>\n<li>Evaluate the model's performance using the <code>score</code> method.</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">learnML.regression</span> <span class=\"kn\">import</span> <span class=\"n\">LinearRegression</span>\n\n<span class=\"c1\"># Create an instance of LinearRegression</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">LinearRegression</span><span class=\"p\">(</span><span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"n\">n_iterations</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Fit the model to training data</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">Y_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Make predictions on new data</span>\n<span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calculate the model&#39;s score</span>\n<span class=\"n\">model_score</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">Y_test</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<hr />\n\n<h2 id=\"advantages\">Advantages</h2>\n\n<ul>\n<li>Easy to implement</li>\n<li>Easy to interpret the output</li>\n<li>Computationally cheap</li>\n</ul>\n\n<h2 id=\"disadvantages\">Disadvantages</h2>\n\n<ul>\n<li>Poor performance on non-linear data</li>\n<li>Sensitive to outliers</li>\n<li>Sensitive to overfitting</li>\n</ul>\n\n<hr />\n", "bases": "learnML.interfaces.iregression.IRegression"}, "learnML.regression.LinearRegression.__init__": {"fullname": "learnML.regression.LinearRegression.__init__", "modulename": "learnML.regression", "qualname": "LinearRegression.__init__", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>learning_rate</code> : np.float64, optional</p>\n\n<ul>\n<li>The learning rate, by default 0.001</li>\n<li>The learning rate determines how much the weights are updated at each iteration</li>\n<li>A low learning rate will take longer to converge, but a high learning rate may overshoot the optimal solution</li>\n</ul>\n\n<p><code>n_iterations</code> : int, optional</p>\n\n<ul>\n<li>The number of iterations, by default 1000</li>\n<li>The number of iterations determines how many times the weights are updated</li>\n<li>A higher number of iterations will take longer to converge, but a lower number of iterations may not be enough to converge</li>\n</ul>\n\n<p><code>lambda_</code> : np.float64, optional</p>\n\n<ul>\n<li>The regularization parameter, by default 0</li>\n<li>The regularization parameter helps prevent overfitting by penalizing large weights</li>\n<li>A higher regularization parameter will penalize large weights more, but a lower regularization parameter may not be enough to prevent overfitting</li>\n</ul>\n\n<p><code>x_scalar</code> : Union[IFeatureEngineering, List[IFeatureEngineering]], optional</p>\n\n<ul>\n<li>The feature engineering for the input data, by default None</li>\n<li>If a list is provided, the feature engineering will be applied in the order provided</li>\n<li>If a single feature engineering is provided, it will be applied to all input data</li>\n</ul>\n\n<p><code>y_scalar</code> : Union[IFeatureEngineering, List[IFeatureEngineering]], optional</p>\n\n<ul>\n<li>The feature engineering for the output data, by default None</li>\n<li>If a list is provided, the feature engineering will be applied in the order provided</li>\n<li>If a single feature engineering is provided, it will be applied to all output data</li>\n</ul>\n\n<p><code>debug</code> : bool, optional</p>\n\n<ul>\n<li>Whether to print debug messages, by default True</li>\n<li>Debug messages include the cost at each iteration</li>\n</ul>\n\n<p><code>copy_x</code> : bool, optional</p>\n\n<ul>\n<li>Whether to copy the input array, by default True</li>\n<li>If False, the input array will be overwritten</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">n_iterations</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">lambda_</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">x_scalar</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">learnML</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ifeature_engineering</span><span class=\"o\">.</span><span class=\"n\">IFeatureEngineering</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">learnML</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ifeature_engineering</span><span class=\"o\">.</span><span class=\"n\">IFeatureEngineering</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y_scalar</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">learnML</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ifeature_engineering</span><span class=\"o\">.</span><span class=\"n\">IFeatureEngineering</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">learnML</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ifeature_engineering</span><span class=\"o\">.</span><span class=\"n\">IFeatureEngineering</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">copy_x</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, "learnML.regression.LinearRegression.fit": {"fullname": "learnML.regression.LinearRegression.fit", "modulename": "learnML.regression", "qualname": "LinearRegression.fit", "kind": "function", "doc": "<h3 id=\"train-the-model-given-x-and-y\">Train the model given X and Y.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features) or (n_samples,)</li>\n<li>If the shape is (n_samples,), then the model will be trained as a\nunivariate linear regression model</li>\n<li>If the shape is (n_samples, n_features), then the model will be\ntrained as a multivariate linear regression model</li>\n</ul>\n\n<p><code>Y</code> : np.ndarray</p>\n\n<ul>\n<li>The output array of shape (n_samples,) or (n_samples, 1)</li>\n</ul>\n\n<p><code>w</code> : np.ndarray, optional</p>\n\n<ul>\n<li>The weight array, by default None</li>\n<li>If None, then the weight array will be initialized to an array of\nzeros of shape (n_features,)</li>\n<li>If not None, then the weight array will be initialized to the given\narray</li>\n</ul>\n\n<p><code>b</code> : np.float64, optional</p>\n\n<ul>\n<li>The intercept, by default 0</li>\n<li>If None, then the intercept will be initialized to 0</li>\n<li>If not None, then the intercept will be initialized to the given\nvalue</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None</p>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">W</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "learnML.regression.LinearRegression.predict": {"fullname": "learnML.regression.LinearRegression.predict", "modulename": "learnML.regression", "qualname": "LinearRegression.predict", "kind": "function", "doc": "<h3 id=\"return-the-predicted-values-given-x\">Return the predicted values given X.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features) or (n_samples,)</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.ndarray</code></p>\n\n<ul>\n<li>The predicted values of shape (n_samples, 1) or (n_samples,)</li>\n<li>If the model was trained as a univariate linear regression model,\nthen the shape will be (n_samples,)</li>\n<li>If the model was trained as a multivariate linear regression model,\nthen the shape will be (n_samples, 1)</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.regression.LinearRegression.score": {"fullname": "learnML.regression.LinearRegression.score", "modulename": "learnML.regression", "qualname": "LinearRegression.score", "kind": "function", "doc": "<h3 id=\"return-the-cost-for-given-x-and-y\">Return the cost for given X and Y.</h3>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>X</code> : np.ndarray</p>\n\n<ul>\n<li>The input array of shape (n_samples, n_features) or (n_samples,)</li>\n</ul>\n\n<p><code>Y</code> : np.ndarray</p>\n\n<ul>\n<li>The output array of shape (n_samples,) or (n_samples, 1)</li>\n</ul>\n\n<p><code>w</code> : np.ndarray, optional</p>\n\n<ul>\n<li>The weight array, by default None</li>\n<li>If None, then the weight array will be cosidered as the trained\nweight array</li>\n</ul>\n\n<p><code>b</code> : np.float64, optional</p>\n\n<ul>\n<li>The intercept, by default None</li>\n<li>If None, then the intercept will be cosidered as the trained\nintercept</li>\n</ul>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p><code>np.float64</code></p>\n\n<ul>\n<li>The computed cost</li>\n</ul>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.regression.PolynomialRegression": {"fullname": "learnML.regression.PolynomialRegression", "modulename": "learnML.regression", "qualname": "PolynomialRegression", "kind": "class", "doc": "<h1 id=\"polynomial-linear-regression-model\">Polynomial Linear Regression Model</h1>\n\n<p>Polynomial Regression is an extension of Linear Regression that allows for the modeling of nonlinear relationships between the input features and the target variable. It achieves this by introducing polynomial features, which are derived from raising the original input features to various powers. This approach can capture more complex patterns in the data and provide a higher degree of flexibility in modeling.</p>\n\n<hr />\n\n<h2 id=\"mathematical-approach\">Mathematical Approach</h2>\n\n<p>Polynomial Regression aims to approximate the relationship between the input feature <code>x</code> and the target variable <code>y</code> using a polynomial equation of the form:</p>\n\n<pre><code>y = b0 + b1*x + b2*x^2 + ... + bn*x^n\n</code></pre>\n\n<p>Where:</p>\n\n<ul>\n<li><code>y</code> is the predicted output (target variable).</li>\n<li><code>x</code> is the input feature.</li>\n<li><code>b0, b1, ..., bn</code> are the coefficients of the polynomial terms.</li>\n<li><code>n</code> is the degree of the polynomial.</li>\n</ul>\n\n<p>The degree <code>n</code> determines the complexity of the polynomial curve. By increasing the degree, the model can fit the training data more closely, but it might also lead to overfitting.</p>\n\n<p>Polynomial Regression is implemented using a linear regression model by treating the polynomial terms as separate input features. The model learns the optimal coefficients <code>b0, b1, ..., bn</code> that minimize the difference between predicted values and actual target values.</p>\n\n<hr />\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>To utilize the Polynomial Regression model, follow these steps:</p>\n\n<ol>\n<li>Import the <code>PolynomialRegression</code> class from the appropriate module.</li>\n<li>Create an instance of the <code>PolynomialRegression</code> class, specifying hyperparameters such as learning rate, degree, etc.</li>\n<li>Fit the model to your training data using the <code>fit</code> method.</li>\n<li>Make predictions on new data using the <code>predict</code> method.</li>\n<li>Evaluate the model's performance using the <code>score</code> method.</li>\n</ol>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">learnML.regression</span> <span class=\"kn\">import</span> <span class=\"n\">PolynomialRegression</span>\n\n<span class=\"c1\"># Create an instance of PolynomialRegression</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">PolynomialRegression</span><span class=\"p\">(</span><span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"n\">degree</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n_iterations</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Fit the model to training data</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">Y_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Make predictions on new data</span>\n<span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Calculate the model&#39;s score</span>\n<span class=\"n\">model_score</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">Y_test</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<hr />\n", "bases": "learnML.regression.linear_regression.LinearRegression"}, "learnML.regression.PolynomialRegression.__init__": {"fullname": "learnML.regression.PolynomialRegression.__init__", "modulename": "learnML.regression", "qualname": "PolynomialRegression.__init__", "kind": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p><code>learning_rate</code> : np.float64, optional</p>\n\n<ul>\n<li>The learning rate, by default 0.001</li>\n<li>The learning rate determines how much the weights are updated at each iteration</li>\n<li>A low learning rate will take longer to converge, but a high learning rate may overshoot the optimal solution</li>\n</ul>\n\n<p><code>n_iterations</code> : int, optional</p>\n\n<ul>\n<li>The number of iterations, by default 1000</li>\n<li>The number of iterations determines how many times the weights are updated</li>\n<li>A higher number of iterations will take longer to converge, but a lower number of iterations may not be enough to converge</li>\n</ul>\n\n<p><code>degree</code> : Union[int, List[int], Dict[int, Union[int, List[int]]]], optional</p>\n\n<ul>\n<li>The degree of the polynomial, by default 2</li>\n<li>It can be a single integer, a list of integers or a dictionary of integers and lists of integers</li>\n<li>If it is a single integer, then the polynomial features of all the features of the input array will be generated with the given degree from 1 to the given degree</li>\n<li>If it is a list of integers, then the polynomial features of all the features of the input array will be generated with the given degrees</li>\n<li>If it is a dictionary of integers and lists of integers, then for each key-value pair in the dictionary, the polynomial features of the features at the key index of the input array will be generated with the given degrees in the list</li>\n</ul>\n\n<p><code>lambda_</code> : np.float64, optional</p>\n\n<ul>\n<li>The regularization parameter, by default 0</li>\n<li>The regularization parameter helps prevent overfitting by penalizing large weights</li>\n<li>A higher regularization parameter will penalize large weights more, but a lower regularization parameter may not be enough to prevent overfitting</li>\n</ul>\n\n<p><code>x_scalar</code> : Union[IFeatureEngineering, List[IFeatureEngineering]], optional</p>\n\n<ul>\n<li>The feature engineering for the input data, by default None</li>\n<li>If a list is provided, the feature engineering will be applied in the order provided</li>\n<li>If a single feature engineering is provided, it will be applied to all input data</li>\n</ul>\n\n<p><code>y_scalar</code> : Union[IFeatureEngineering, List[IFeatureEngineering]], optional</p>\n\n<ul>\n<li>The feature engineering for the output data, by default None</li>\n<li>If a list is provided, the feature engineering will be applied in the order provided</li>\n<li>If a single feature engineering is provided, it will be applied to all output data</li>\n</ul>\n\n<p><code>debug</code> : bool, optional</p>\n\n<ul>\n<li>Whether to print debug messages, by default True</li>\n<li>Debug messages include the cost at each iteration</li>\n</ul>\n\n<p><code>copy_x</code> : bool, optional</p>\n\n<ul>\n<li>Whether to copy the input array, by default True</li>\n<li>If False, the input array will be overwritten</li>\n</ul>\n\n<h2 id=\"degree\">Degree</h2>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">degree</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"c1\"># Generate polynomial features of degree 1 and 2 for all the features</span>\n\n<span class=\"n\">degree</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"c1\"># Generate polynomial features of degree 2, 3 and 6 for all the features</span>\n\n<span class=\"n\">degree</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}</span>\n<span class=\"c1\"># Generate polynomial features of degree 2, 3 and 6 for the first feature</span>\n<span class=\"c1\"># Generate polynomial features of degree 1 and 2 for the second feature</span>\n</code></pre>\n</div>\n\n<hr />\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">n_iterations</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">degree</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">lambda_</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">x_scalar</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">learnML</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ifeature_engineering</span><span class=\"o\">.</span><span class=\"n\">IFeatureEngineering</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y_scalar</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">learnML</span><span class=\"o\">.</span><span class=\"n\">interfaces</span><span class=\"o\">.</span><span class=\"n\">ifeature_engineering</span><span class=\"o\">.</span><span class=\"n\">IFeatureEngineering</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">copy_x</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, "learnML.utils": {"fullname": "learnML.utils", "modulename": "learnML.utils", "kind": "module", "doc": "<p></p>\n"}, "learnML.utils.Metrics": {"fullname": "learnML.utils.Metrics", "modulename": "learnML.utils", "qualname": "Metrics", "kind": "class", "doc": "<p>A class to measure the accuracy of a model using Metrics.</p>\n"}, "learnML.utils.Metrics.confusion_matrix": {"fullname": "learnML.utils.Metrics.confusion_matrix", "modulename": "learnML.utils", "qualname": "Metrics.confusion_matrix", "kind": "function", "doc": "<p>Returns the confusion matrix of the model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_pred : np.ndarray\n    The model prediction array of shape (n_samples, ) or (1, n_samples)\ny_test : np.ndarray\n    The testing array of shape (n_samples, ) or (1, n_samples)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>np.ndarray\n    The confusion matrix of the model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.utils.Metrics.accuracy_score": {"fullname": "learnML.utils.Metrics.accuracy_score", "modulename": "learnML.utils", "qualname": "Metrics.accuracy_score", "kind": "function", "doc": "<p>Returns the accuracy score of model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_pred : np.ndarray\n    The model prediction array of shape (n_samples, ) or (1, n_samples)\ny_test : np.ndarray\n    The testing array of shape (n_samples, ) or (1, n_samples)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>np.float64\n    The accuracy of model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.utils.Metrics.precision_score": {"fullname": "learnML.utils.Metrics.precision_score", "modulename": "learnML.utils", "qualname": "Metrics.precision_score", "kind": "function", "doc": "<p>Returns the precision score of model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_pred : np.ndarray\n    The model prediction array of shape (n_samples, ) or (1, n_samples)\ny_test : np.ndarray\n    The testing array of shape (n_samples, ) or (1, n_samples)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>np.float64\n    The precision of model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.utils.Metrics.recall_score": {"fullname": "learnML.utils.Metrics.recall_score", "modulename": "learnML.utils", "qualname": "Metrics.recall_score", "kind": "function", "doc": "<p>Returns the recall score of model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_pred : np.ndarray\n    The model prediction array of shape (n_samples, ) or (1, n_samples)\ny_test : np.ndarray\n    The testing array of shape (n_samples, ) or (1, n_samples)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>np.float64\n    The recall of model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.utils.Metrics.f1_score": {"fullname": "learnML.utils.Metrics.f1_score", "modulename": "learnML.utils", "qualname": "Metrics.f1_score", "kind": "function", "doc": "<p>Returns the f1 score of model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_pred : np.ndarray\n    The model prediction array of shape (n_samples, ) or (1, n_samples)\ny_test : np.ndarray\n    The testing array of shape (n_samples, ) or (1, n_samples)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>np.float64\n    The f1 score of model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.utils.Metrics.r2_score": {"fullname": "learnML.utils.Metrics.r2_score", "modulename": "learnML.utils", "qualname": "Metrics.r2_score", "kind": "function", "doc": "<p>Returns the r2 score of model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_pred : np.ndarray\n    The model prediction array of shape (n_samples, ) or (1, n_samples)\ny_test : np.ndarray\n    The testing array of shape (n_samples, ) or (1, n_samples)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>np.float64\n    The r2 score of model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.utils.confusion_matrix": {"fullname": "learnML.utils.confusion_matrix", "modulename": "learnML.utils", "qualname": "confusion_matrix", "kind": "function", "doc": "<p>Returns the confusion matrix of model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_pred : np.ndarray\n    The model prediction array of shape (n_samples, ) or (1, n_samples)\ny_test : np.ndarray\n    The testing array of shape (n_samples, ) or (1, n_samples)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>np.ndarray\n    The confusion matrix of model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "learnML.utils.accuracy_score": {"fullname": "learnML.utils.accuracy_score", "modulename": "learnML.utils", "qualname": "accuracy_score", "kind": "function", "doc": "<p>Returns the accuracy score of model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_pred : np.ndarray\n    The model prediction array of shape (n_samples, ) or (1, n_samples)\ny_test : np.ndarray\n    The testing array of shape (n_samples, ) or (1, n_samples)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>np.float64\n    The accuracy of model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.utils.precision_score": {"fullname": "learnML.utils.precision_score", "modulename": "learnML.utils", "qualname": "precision_score", "kind": "function", "doc": "<p>Returns the precision score of model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_pred : np.ndarray\n    The model prediction array of shape (n_samples, ) or (1, n_samples)\ny_test : np.ndarray\n    The testing array of shape (n_samples, ) or (1, n_samples)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>np.float64\n    The precision of model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.utils.recall_score": {"fullname": "learnML.utils.recall_score", "modulename": "learnML.utils", "qualname": "recall_score", "kind": "function", "doc": "<p>Returns the recall score of model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_pred : np.ndarray\n    The model prediction array of shape (n_samples, ) or (1, n_samples)\ny_test : np.ndarray\n    The testing array of shape (n_samples, ) or (1, n_samples)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>np.float64\n    The recall of model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.utils.Errors": {"fullname": "learnML.utils.Errors", "modulename": "learnML.utils", "qualname": "Errors", "kind": "class", "doc": "<p>A class to measure the accuracy of a model using Errors.</p>\n"}, "learnML.utils.Errors.mean_squared_error": {"fullname": "learnML.utils.Errors.mean_squared_error", "modulename": "learnML.utils", "qualname": "Errors.mean_squared_error", "kind": "function", "doc": "<p>Returns the mean squared error of model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_pred : np.ndarray\n    The model prediction array of shape (n_samples, ) or (1, n_samples)\ny_test : np.ndarray\n    The testing array of shape (n_samples, ) or (1, n_samples)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>np.float64\n    The mean squared error of model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.utils.Errors.mean_absolute_error": {"fullname": "learnML.utils.Errors.mean_absolute_error", "modulename": "learnML.utils", "qualname": "Errors.mean_absolute_error", "kind": "function", "doc": "<p>Returns the mean absolute error of model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_pred : np.ndarray\n    The model prediction array of shape (n_samples, ) or (1, n_samples)\ny_test : np.ndarray\n    The testing array of shape (n_samples, ) or (1, n_samples)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>np.float64\n    The mean absolute error of model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.utils.Errors.mean_squared_log_error": {"fullname": "learnML.utils.Errors.mean_squared_log_error", "modulename": "learnML.utils", "qualname": "Errors.mean_squared_log_error", "kind": "function", "doc": "<p>Returns the mean squared log error of model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_pred : np.ndarray\n    The model prediction array of shape (n_samples, ) or (1, n_samples)\ny_test : np.ndarray\n    The testing array of shape (n_samples, ) or (1, n_samples)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>np.float64\n    The mean squared log error of model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.utils.mean_squared_error": {"fullname": "learnML.utils.mean_squared_error", "modulename": "learnML.utils", "qualname": "mean_squared_error", "kind": "function", "doc": "<p>Returns the mean squared error of model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_pred : np.ndarray\n    The model prediction array of shape (n_samples, ) or (1, n_samples)\ny_test : np.ndarray\n    The testing array of shape (n_samples, ) or (1, n_samples)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>np.float64\n    The mean squared error of model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.utils.mean_absolute_error": {"fullname": "learnML.utils.mean_absolute_error", "modulename": "learnML.utils", "qualname": "mean_absolute_error", "kind": "function", "doc": "<p>Returns the mean absolute error of model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_pred : np.ndarray\n    The model prediction array of shape (n_samples, ) or (1, n_samples)\ny_test : np.ndarray\n    The testing array of shape (n_samples, ) or (1, n_samples)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>np.float64\n    The mean absolute error of model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}, "learnML.utils.mean_squared_log_error": {"fullname": "learnML.utils.mean_squared_log_error", "modulename": "learnML.utils", "qualname": "mean_squared_log_error", "kind": "function", "doc": "<p>Returns the mean squared log error of model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>y_pred : np.ndarray\n    The model prediction array of shape (n_samples, ) or (1, n_samples)\ny_test : np.ndarray\n    The testing array of shape (n_samples, ) or (1, n_samples)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>np.float64\n    The mean squared log error of model</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span>:</span></span>", "funcdef": "def"}}, "docInfo": {"learnML": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 487}, "learnML.classification": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "learnML.classification.LogisticRegression": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 490}, "learnML.classification.LogisticRegression.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 176, "bases": 0, "doc": 307}, "learnML.classification.LogisticRegression.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 94, "bases": 0, "doc": 180}, "learnML.classification.LogisticRegression.predict_proba": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 70}, "learnML.classification.LogisticRegression.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 67}, "learnML.classification.LogisticRegression.score": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 98, "bases": 0, "doc": 161}, "learnML.classification.LinearSVC": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 976}, "learnML.classification.LinearSVC.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 177, "bases": 0, "doc": 307}, "learnML.classification.LinearSVC.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 94, "bases": 0, "doc": 179}, "learnML.classification.LinearSVC.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 59}, "learnML.classification.LinearSVC.score": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 98, "bases": 0, "doc": 149}, "learnML.interfaces": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "learnML.interfaces.IModel": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 252}, "learnML.interfaces.IModel.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 81}, "learnML.interfaces.IModel.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 76}, "learnML.interfaces.IModel.score": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 95}, "learnML.interfaces.IFeatureEngineering": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 444}, "learnML.interfaces.IFeatureEngineering.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 29}, "learnML.interfaces.IFeatureEngineering.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 55}, "learnML.interfaces.IFeatureEngineering.transform": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 73}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 78}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 64}, "learnML.interfaces.IRegression": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 605}, "learnML.interfaces.IRegression.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 70, "bases": 0, "doc": 87}, "learnML.interfaces.IRegression.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 81}, "learnML.interfaces.IRegression.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 76}, "learnML.interfaces.IRegression.score": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 95}, "learnML.interfaces.IRegression.get_cost_history": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 33}, "learnML.interfaces.IRegression.get_parameter_history": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 31}, "learnML.interfaces.IRegression.get_weights": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 25}, "learnML.interfaces.IRegression.get_intercept": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 25}, "learnML.preprocessing": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "learnML.preprocessing.ZScoreNormalization": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 517}, "learnML.preprocessing.ZScoreNormalization.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 122}, "learnML.preprocessing.ZScoreNormalization.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 80}, "learnML.preprocessing.ZScoreNormalization.transform": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 82}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 111}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 84}, "learnML.preprocessing.PolynomialFeatures": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 302}, "learnML.preprocessing.PolynomialFeatures.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 342}, "learnML.preprocessing.PolynomialFeatures.transform": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 101}, "learnML.preprocessing.OneHotEncoder": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 237}, "learnML.preprocessing.OneHotEncoder.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 127}, "learnML.preprocessing.OneHotEncoder.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 70}, "learnML.preprocessing.OneHotEncoder.transform": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 100}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 102}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 102}, "learnML.preprocessing.OneHotEncoder.get_categories": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 31}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 32}, "learnML.preprocessing.train_test_split": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "learnML.preprocessing.KFoldSplit": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 428}, "learnML.preprocessing.KFoldSplit.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 127, "bases": 0, "doc": 106}, "learnML.preprocessing.KFoldSplit.k": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "learnML.preprocessing.KFoldSplit.split": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 24}, "learnML.preprocessing.KFoldSplit.get_fold": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 107, "bases": 0, "doc": 111}, "learnML.preprocessing.OneLeaveOutSplit": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 248}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 109, "bases": 0, "doc": 75}, "learnML.preprocessing.OneLeaveOutSplit.randomize": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 14}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 107, "bases": 0, "doc": 111}, "learnML.preprocessing.train_test_split.train_test_split": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 190, "bases": 0, "doc": 347}, "learnML.preprocessing.train_test_split.KFoldSplit": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 428}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 127, "bases": 0, "doc": 106}, "learnML.preprocessing.train_test_split.KFoldSplit.k": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 24}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 107, "bases": 0, "doc": 111}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 248}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 109, "bases": 0, "doc": 75}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 14}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 107, "bases": 0, "doc": 111}, "learnML.regression": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "learnML.regression.UnivariateLinearRegression": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 505}, "learnML.regression.UnivariateLinearRegression.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 219, "bases": 0, "doc": 310}, "learnML.regression.UnivariateLinearRegression.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 95, "bases": 0, "doc": 109}, "learnML.regression.UnivariateLinearRegression.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 70, "bases": 0, "doc": 69}, "learnML.regression.UnivariateLinearRegression.score": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 98, "bases": 0, "doc": 120}, "learnML.regression.LinearRegression": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 523}, "learnML.regression.LinearRegression.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 243, "bases": 0, "doc": 367}, "learnML.regression.LinearRegression.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 93, "bases": 0, "doc": 221}, "learnML.regression.LinearRegression.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 111}, "learnML.regression.LinearRegression.score": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 98, "bases": 0, "doc": 158}, "learnML.regression.PolynomialRegression": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 540}, "learnML.regression.PolynomialRegression.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 267, "bases": 0, "doc": 680}, "learnML.utils": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "learnML.utils.Metrics": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 14}, "learnML.utils.Metrics.confusion_matrix": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 62}, "learnML.utils.Metrics.accuracy_score": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 59}, "learnML.utils.Metrics.precision_score": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 59}, "learnML.utils.Metrics.recall_score": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 59}, "learnML.utils.Metrics.f1_score": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 60}, "learnML.utils.Metrics.r2_score": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 60}, "learnML.utils.confusion_matrix": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 60}, "learnML.utils.accuracy_score": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 59}, "learnML.utils.precision_score": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 59}, "learnML.utils.recall_score": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 59}, "learnML.utils.Errors": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 14}, "learnML.utils.Errors.mean_squared_error": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 62}, "learnML.utils.Errors.mean_absolute_error": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 62}, "learnML.utils.Errors.mean_squared_log_error": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 64}, "learnML.utils.mean_squared_error": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 62}, "learnML.utils.mean_absolute_error": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 62}, "learnML.utils.mean_squared_log_error": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 64}}, "length": 103, "save": true}, "index": {"qualname": {"root": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 14, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {"learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1}, "learnML.classification.LogisticRegression.predict": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "c": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.predict": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1}}, "df": 5}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.predict": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 14}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}}, "df": 3}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"learnML.interfaces.IRegression.get_intercept": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"learnML.interfaces.IModel": {"tf": 1}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IModel.predict": {"tf": 1}, "learnML.interfaces.IModel.score": {"tf": 1}}, "df": 4}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.interfaces.IRegression": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.interfaces.IRegression.predict": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.interfaces.IRegression.get_cost_history": {"tf": 1}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 1}, "learnML.interfaces.IRegression.get_weights": {"tf": 1}, "learnML.interfaces.IRegression.get_intercept": {"tf": 1}}, "df": 9}}}}}}}}}}}, "f": {"1": {"docs": {"learnML.utils.Metrics.f1_score": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1}}, "df": 12}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}}, "df": 4}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression.predict_proba": {"tf": 1}, "learnML.classification.LogisticRegression.predict": {"tf": 1}, "learnML.classification.LinearSVC.predict": {"tf": 1}, "learnML.interfaces.IModel.predict": {"tf": 1}, "learnML.interfaces.IRegression.predict": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1}, "learnML.regression.LinearRegression.predict": {"tf": 1}}, "df": 7}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.utils.Metrics.precision_score": {"tf": 1}, "learnML.utils.precision_score": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {"learnML.classification.LogisticRegression.predict_proba": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.interfaces.IRegression.get_parameter_history": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}}, "df": 3}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression.score": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}, "learnML.utils.Metrics.accuracy_score": {"tf": 1}, "learnML.utils.Metrics.precision_score": {"tf": 1}, "learnML.utils.Metrics.recall_score": {"tf": 1}, "learnML.utils.Metrics.f1_score": {"tf": 1}, "learnML.utils.Metrics.r2_score": {"tf": 1}, "learnML.utils.accuracy_score": {"tf": 1}, "learnML.utils.precision_score": {"tf": 1}, "learnML.utils.recall_score": {"tf": 1}}, "df": 14}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}}, "df": 4}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 4}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}}, "df": 10}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}}, "df": 2}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"learnML.interfaces.IRegression.get_cost_history": {"tf": 1}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 1}, "learnML.interfaces.IRegression.get_weights": {"tf": 1}, "learnML.interfaces.IRegression.get_intercept": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}}, "df": 10}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"learnML.interfaces.IRegression.get_cost_history": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.utils.Metrics.confusion_matrix": {"tf": 1}, "learnML.utils.confusion_matrix": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 1}}, "df": 1}}}}}}}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"learnML.interfaces.IRegression.get_cost_history": {"tf": 1}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 1}}, "df": 2}}}}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"learnML.interfaces.IRegression.get_weights": {"tf": 1}}, "df": 1}}}}}}}, "z": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.preprocessing.OneHotEncoder": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1}}, "df": 8}}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_error": {"tf": 1}, "learnML.utils.mean_absolute_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 6, "s": {"docs": {"learnML.utils.Errors": {"tf": 1}, "learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}}, "df": 4}}}}}}, "k": {"docs": {"learnML.preprocessing.KFoldSplit.k": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.k": {"tf": 1}}, "df": 2, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.k": {"tf": 1}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.k": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}}, "df": 10}}}}}}}}}}, "r": {"2": {"docs": {"learnML.utils.Metrics.r2_score": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"tf": 1}}, "df": 2}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"learnML.utils.Metrics.recall_score": {"tf": 1}, "learnML.utils.recall_score": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"learnML.utils.Metrics": {"tf": 1}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1}, "learnML.utils.Metrics.accuracy_score": {"tf": 1}, "learnML.utils.Metrics.precision_score": {"tf": 1}, "learnML.utils.Metrics.recall_score": {"tf": 1}, "learnML.utils.Metrics.f1_score": {"tf": 1}, "learnML.utils.Metrics.r2_score": {"tf": 1}}, "df": 7}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_error": {"tf": 1}, "learnML.utils.mean_absolute_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 6}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"learnML.utils.Metrics.confusion_matrix": {"tf": 1}, "learnML.utils.confusion_matrix": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"learnML.utils.Metrics.accuracy_score": {"tf": 1}, "learnML.utils.accuracy_score": {"tf": 1}}, "df": 2}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.mean_absolute_error": {"tf": 1}}, "df": 2}}}}}}}}}}, "fullname": {"root": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 14, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"learnML": {"tf": 1}, "learnML.classification": {"tf": 1}, "learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1}, "learnML.classification.LogisticRegression.predict": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.predict": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1}, "learnML.interfaces": {"tf": 1}, "learnML.interfaces.IModel": {"tf": 1}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IModel.predict": {"tf": 1}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.interfaces.IRegression.predict": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.interfaces.IRegression.get_cost_history": {"tf": 1}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 1}, "learnML.interfaces.IRegression.get_weights": {"tf": 1}, "learnML.interfaces.IRegression.get_intercept": {"tf": 1}, "learnML.preprocessing": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.k": {"tf": 1}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.k": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.predict": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}, "learnML.utils": {"tf": 1}, "learnML.utils.Metrics": {"tf": 1}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1}, "learnML.utils.Metrics.accuracy_score": {"tf": 1}, "learnML.utils.Metrics.precision_score": {"tf": 1}, "learnML.utils.Metrics.recall_score": {"tf": 1}, "learnML.utils.Metrics.f1_score": {"tf": 1}, "learnML.utils.Metrics.r2_score": {"tf": 1}, "learnML.utils.confusion_matrix": {"tf": 1}, "learnML.utils.accuracy_score": {"tf": 1}, "learnML.utils.precision_score": {"tf": 1}, "learnML.utils.recall_score": {"tf": 1}, "learnML.utils.Errors": {"tf": 1}, "learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_error": {"tf": 1}, "learnML.utils.mean_absolute_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 103}}}}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {"learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1}, "learnML.classification.LogisticRegression.predict": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "c": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.predict": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1}}, "df": 5}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.predict": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification": {"tf": 1}, "learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1}, "learnML.classification.LogisticRegression.predict": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.predict": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1}}, "df": 12}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"learnML.interfaces.IRegression.get_cost_history": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.utils.Metrics.confusion_matrix": {"tf": 1}, "learnML.utils.confusion_matrix": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 1}}, "df": 1}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 14}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.interfaces": {"tf": 1}, "learnML.interfaces.IModel": {"tf": 1}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IModel.predict": {"tf": 1}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.interfaces.IRegression.predict": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.interfaces.IRegression.get_cost_history": {"tf": 1}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 1}, "learnML.interfaces.IRegression.get_weights": {"tf": 1}, "learnML.interfaces.IRegression.get_intercept": {"tf": 1}}, "df": 20}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"learnML.interfaces.IRegression.get_intercept": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}}, "df": 3}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"learnML.interfaces.IModel": {"tf": 1}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IModel.predict": {"tf": 1}, "learnML.interfaces.IModel.score": {"tf": 1}}, "df": 4}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.interfaces.IRegression": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.interfaces.IRegression.predict": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.interfaces.IRegression.get_cost_history": {"tf": 1}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 1}, "learnML.interfaces.IRegression.get_weights": {"tf": 1}, "learnML.interfaces.IRegression.get_intercept": {"tf": 1}}, "df": 9}}}}}}}}}}}, "f": {"1": {"docs": {"learnML.utils.Metrics.f1_score": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1}}, "df": 12}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}}, "df": 4}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression.predict_proba": {"tf": 1}, "learnML.classification.LogisticRegression.predict": {"tf": 1}, "learnML.classification.LinearSVC.predict": {"tf": 1}, "learnML.interfaces.IModel.predict": {"tf": 1}, "learnML.interfaces.IRegression.predict": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1}, "learnML.regression.LinearRegression.predict": {"tf": 1}}, "df": 7}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.preprocessing": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.k": {"tf": 1}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.k": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}}, "df": 38}}}}}}}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.utils.Metrics.precision_score": {"tf": 1}, "learnML.utils.precision_score": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {"learnML.classification.LogisticRegression.predict_proba": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.interfaces.IRegression.get_parameter_history": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}}, "df": 3}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression.score": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}, "learnML.utils.Metrics.accuracy_score": {"tf": 1}, "learnML.utils.Metrics.precision_score": {"tf": 1}, "learnML.utils.Metrics.recall_score": {"tf": 1}, "learnML.utils.Metrics.f1_score": {"tf": 1}, "learnML.utils.Metrics.r2_score": {"tf": 1}, "learnML.utils.accuracy_score": {"tf": 1}, "learnML.utils.precision_score": {"tf": 1}, "learnML.utils.recall_score": {"tf": 1}}, "df": 14}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.k": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}}, "df": 12}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 4}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}}, "df": 10}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.k": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}}, "df": 11}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.k": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}}, "df": 11}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"learnML.interfaces.IRegression.get_cost_history": {"tf": 1}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 1}, "learnML.interfaces.IRegression.get_weights": {"tf": 1}, "learnML.interfaces.IRegression.get_intercept": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}}, "df": 10}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"learnML.interfaces.IRegression.get_cost_history": {"tf": 1}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 1}}, "df": 2}}}}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"learnML.interfaces.IRegression.get_weights": {"tf": 1}}, "df": 1}}}}}}}, "z": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.preprocessing.OneHotEncoder": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1}}, "df": 8}}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_error": {"tf": 1}, "learnML.utils.mean_absolute_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 6, "s": {"docs": {"learnML.utils.Errors": {"tf": 1}, "learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}}, "df": 4}}}}}}, "k": {"docs": {"learnML.preprocessing.KFoldSplit.k": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.k": {"tf": 1}}, "df": 2, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.k": {"tf": 1}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.k": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}}, "df": 10}}}}}}}}}}, "r": {"2": {"docs": {"learnML.utils.Metrics.r2_score": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"tf": 1}}, "df": 2}}}}}}}}, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.regression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.predict": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 13}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"learnML.utils.Metrics.recall_score": {"tf": 1}, "learnML.utils.recall_score": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"learnML.utils": {"tf": 1}, "learnML.utils.Metrics": {"tf": 1}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1}, "learnML.utils.Metrics.accuracy_score": {"tf": 1}, "learnML.utils.Metrics.precision_score": {"tf": 1}, "learnML.utils.Metrics.recall_score": {"tf": 1}, "learnML.utils.Metrics.f1_score": {"tf": 1}, "learnML.utils.Metrics.r2_score": {"tf": 1}, "learnML.utils.confusion_matrix": {"tf": 1}, "learnML.utils.accuracy_score": {"tf": 1}, "learnML.utils.precision_score": {"tf": 1}, "learnML.utils.recall_score": {"tf": 1}, "learnML.utils.Errors": {"tf": 1}, "learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_error": {"tf": 1}, "learnML.utils.mean_absolute_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 19}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"learnML.utils.Metrics": {"tf": 1}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1}, "learnML.utils.Metrics.accuracy_score": {"tf": 1}, "learnML.utils.Metrics.precision_score": {"tf": 1}, "learnML.utils.Metrics.recall_score": {"tf": 1}, "learnML.utils.Metrics.f1_score": {"tf": 1}, "learnML.utils.Metrics.r2_score": {"tf": 1}}, "df": 7}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_error": {"tf": 1}, "learnML.utils.mean_absolute_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 6}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"learnML.utils.Metrics.confusion_matrix": {"tf": 1}, "learnML.utils.confusion_matrix": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"learnML.utils.Metrics.accuracy_score": {"tf": 1}, "learnML.utils.accuracy_score": {"tf": 1}}, "df": 2}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.mean_absolute_error": {"tf": 1}}, "df": 2}}}}}}}}}}, "annotation": {"root": {"docs": {}, "df": 0}}, "default_value": {"root": {"docs": {}, "df": 0}}, "signature": {"root": {"0": {"0": {"1": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 5}, "docs": {}, "df": 0}, "1": {"docs": {"learnML.classification.LinearSVC.__init__": {"tf": 1}}, "df": 1}, "docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.fit": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.fit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 2}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 15}, "1": {"0": {"0": {"0": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 5}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "2": {"docs": {"learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 4}, "5": {"docs": {"learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}}, "df": 2}, "docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 11.832159566199232}, "learnML.classification.LogisticRegression.fit": {"tf": 8.774964387392123}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 5.291502622129181}, "learnML.classification.LogisticRegression.predict": {"tf": 5.291502622129181}, "learnML.classification.LogisticRegression.score": {"tf": 9}, "learnML.classification.LinearSVC.__init__": {"tf": 11.832159566199232}, "learnML.classification.LinearSVC.fit": {"tf": 8.774964387392123}, "learnML.classification.LinearSVC.predict": {"tf": 5.291502622129181}, "learnML.classification.LinearSVC.score": {"tf": 9}, "learnML.interfaces.IModel.fit": {"tf": 6}, "learnML.interfaces.IModel.predict": {"tf": 5.291502622129181}, "learnML.interfaces.IModel.score": {"tf": 6.324555320336759}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 4}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 5.477225575051661}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 5.830951894845301}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 5.830951894845301}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 5.291502622129181}, "learnML.interfaces.IRegression.__init__": {"tf": 7.483314773547883}, "learnML.interfaces.IRegression.fit": {"tf": 6}, "learnML.interfaces.IRegression.predict": {"tf": 5.291502622129181}, "learnML.interfaces.IRegression.score": {"tf": 6}, "learnML.interfaces.IRegression.get_cost_history": {"tf": 4}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 4}, "learnML.interfaces.IRegression.get_weights": {"tf": 4}, "learnML.interfaces.IRegression.get_intercept": {"tf": 4}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 6.708203932499369}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 5.477225575051661}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 5.291502622129181}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 5.830951894845301}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 5.291502622129181}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 8.306623862918075}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 5.830951894845301}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 6.708203932499369}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 5.477225575051661}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 5.830951894845301}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 5.830951894845301}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 5.830951894845301}, "learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 3.4641016151377544}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 3.4641016151377544}, "learnML.preprocessing.train_test_split": {"tf": 12.409673645990857}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 10.246950765959598}, "learnML.preprocessing.KFoldSplit.split": {"tf": 3.4641016151377544}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 9.38083151964686}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 9.486832980505138}, "learnML.preprocessing.OneLeaveOutSplit.randomize": {"tf": 3.4641016151377544}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 9.38083151964686}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 12.409673645990857}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 10.246950765959598}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 3.4641016151377544}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 9.38083151964686}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 9.486832980505138}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"tf": 3.4641016151377544}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 9.38083151964686}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 13.114877048604}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 8.774964387392123}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 7.615773105863909}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 9}, "learnML.regression.LinearRegression.__init__": {"tf": 13.856406460551018}, "learnML.regression.LinearRegression.fit": {"tf": 8.774964387392123}, "learnML.regression.LinearRegression.predict": {"tf": 5.291502622129181}, "learnML.regression.LinearRegression.score": {"tf": 9}, "learnML.regression.PolynomialRegression.__init__": {"tf": 14.628738838327793}, "learnML.utils.Metrics.confusion_matrix": {"tf": 6}, "learnML.utils.Metrics.accuracy_score": {"tf": 6}, "learnML.utils.Metrics.precision_score": {"tf": 6}, "learnML.utils.Metrics.recall_score": {"tf": 6}, "learnML.utils.Metrics.f1_score": {"tf": 6}, "learnML.utils.Metrics.r2_score": {"tf": 6}, "learnML.utils.confusion_matrix": {"tf": 6}, "learnML.utils.accuracy_score": {"tf": 6}, "learnML.utils.precision_score": {"tf": 6}, "learnML.utils.recall_score": {"tf": 6}, "learnML.utils.Errors.mean_squared_error": {"tf": 6}, "learnML.utils.Errors.mean_absolute_error": {"tf": 6}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 6}, "learnML.utils.mean_squared_error": {"tf": 6}, "learnML.utils.mean_absolute_error": {"tf": 6}, "learnML.utils.mean_squared_log_error": {"tf": 6}}, "df": 78, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 6}}}, "m": {"docs": {}, "df": 0, "l": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2}, "learnML.regression.LinearRegression.__init__": {"tf": 2}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 5}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2}}, "df": 15}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 6}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}}, "df": 2}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 6, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.fit": {"tf": 2}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.predict": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.score": {"tf": 2.23606797749979}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.fit": {"tf": 2}, "learnML.classification.LinearSVC.predict": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.score": {"tf": 2.23606797749979}, "learnML.interfaces.IModel.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.score": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.get_cost_history": {"tf": 1}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 1}, "learnML.interfaces.IRegression.get_weights": {"tf": 1}, "learnML.interfaces.IRegression.get_intercept": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split": {"tf": 2.449489742783178}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 2.449489742783178}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 2.449489742783178}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 2.449489742783178}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 2.449489742783178}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 2.449489742783178}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 2}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 2}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 2.23606797749979}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 2}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 2.23606797749979}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.accuracy_score": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.precision_score": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.recall_score": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.f1_score": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.r2_score": {"tf": 1.7320508075688772}, "learnML.utils.confusion_matrix": {"tf": 1.7320508075688772}, "learnML.utils.accuracy_score": {"tf": 1.7320508075688772}, "learnML.utils.precision_score": {"tf": 1.7320508075688772}, "learnML.utils.recall_score": {"tf": 1.7320508075688772}, "learnML.utils.Errors.mean_squared_error": {"tf": 1.7320508075688772}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1.7320508075688772}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1.7320508075688772}, "learnML.utils.mean_squared_error": {"tf": 1.7320508075688772}, "learnML.utils.mean_absolute_error": {"tf": 1.7320508075688772}, "learnML.utils.mean_squared_log_error": {"tf": 1.7320508075688772}}, "df": 72}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LogisticRegression.fit": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 35}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LogisticRegression.fit": {"tf": 1.7320508075688772}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.predict": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.score": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.fit": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.predict": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.score": {"tf": 1.7320508075688772}, "learnML.interfaces.IModel.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.get_cost_history": {"tf": 1}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 1}, "learnML.interfaces.IRegression.get_weights": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split": {"tf": 2.449489742783178}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 2.449489742783178}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 2.449489742783178}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 2.449489742783178}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 2.449489742783178}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 2.449489742783178}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.f1_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.r2_score": {"tf": 1.4142135623730951}, "learnML.utils.confusion_matrix": {"tf": 1.7320508075688772}, "learnML.utils.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_log_error": {"tf": 1.4142135623730951}}, "df": 65}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}}, "df": 4}}}}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"6": {"4": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.interfaces.IRegression.get_intercept": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.accuracy_score": {"tf": 1}, "learnML.utils.Metrics.precision_score": {"tf": 1}, "learnML.utils.Metrics.recall_score": {"tf": 1}, "learnML.utils.Metrics.f1_score": {"tf": 1}, "learnML.utils.Metrics.r2_score": {"tf": 1}, "learnML.utils.accuracy_score": {"tf": 1}, "learnML.utils.precision_score": {"tf": 1}, "learnML.utils.recall_score": {"tf": 1}, "learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_error": {"tf": 1}, "learnML.utils.mean_absolute_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 31}, "docs": {}, "df": 0}, "docs": {"learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}}, "df": 6}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 6}}}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 2.23606797749979}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.449489742783178}}, "df": 17, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2}, "learnML.regression.LinearRegression.__init__": {"tf": 2}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2}, "learnML.regression.LinearRegression.__init__": {"tf": 2}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 5, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2}, "learnML.regression.LinearRegression.__init__": {"tf": 2}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}}}}}}}}}}}}}, "x": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1}, "learnML.classification.LogisticRegression.predict": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.predict": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IModel.predict": {"tf": 1}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.interfaces.IRegression.predict": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.predict": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 31}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 5}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1}, "learnML.classification.LogisticRegression.predict": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.predict": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IModel.predict": {"tf": 1}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.interfaces.IRegression.predict": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.interfaces.IRegression.get_cost_history": {"tf": 1}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 1}, "learnML.interfaces.IRegression.get_weights": {"tf": 1}, "learnML.interfaces.IRegression.get_intercept": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.predict": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}}, "df": 46}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2}}, "df": 19}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2}, "learnML.regression.LinearRegression.__init__": {"tf": 2}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 6}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}}, "df": 17, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}}, "df": 6}}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 3}}}}, "b": {"docs": {"learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}}, "df": 8, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 6}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 6}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1}, "learnML.utils.Metrics.accuracy_score": {"tf": 1}, "learnML.utils.Metrics.precision_score": {"tf": 1}, "learnML.utils.Metrics.recall_score": {"tf": 1}, "learnML.utils.Metrics.f1_score": {"tf": 1}, "learnML.utils.Metrics.r2_score": {"tf": 1}, "learnML.utils.confusion_matrix": {"tf": 1}, "learnML.utils.accuracy_score": {"tf": 1}, "learnML.utils.precision_score": {"tf": 1}, "learnML.utils.recall_score": {"tf": 1}, "learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_error": {"tf": 1}, "learnML.utils.mean_absolute_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 18}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1.4142135623730951}}, "df": 6}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 6}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}}, "df": 6}}}}, "y": {"docs": {"learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.f1_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.r2_score": {"tf": 1.4142135623730951}, "learnML.utils.confusion_matrix": {"tf": 1.4142135623730951}, "learnML.utils.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_log_error": {"tf": 1.4142135623730951}}, "df": 37}, "w": {"docs": {"learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}}, "df": 8}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}}, "df": 6}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.utils.Metrics.confusion_matrix": {"tf": 1}, "learnML.utils.Metrics.accuracy_score": {"tf": 1}, "learnML.utils.Metrics.precision_score": {"tf": 1}, "learnML.utils.Metrics.recall_score": {"tf": 1}, "learnML.utils.Metrics.f1_score": {"tf": 1}, "learnML.utils.Metrics.r2_score": {"tf": 1}, "learnML.utils.confusion_matrix": {"tf": 1}, "learnML.utils.accuracy_score": {"tf": 1}, "learnML.utils.precision_score": {"tf": 1}, "learnML.utils.recall_score": {"tf": 1}, "learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_error": {"tf": 1}, "learnML.utils.mean_absolute_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 16}}}}, "k": {"docs": {"learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}}, "df": 2}}}, "bases": {"root": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 8}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 7}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"learnML.interfaces.IRegression": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "c": {"docs": {"learnML.interfaces.IModel": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression": {"tf": 1.4142135623730951}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}}, "df": 2}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}, "doc": {"root": {"0": {"0": {"1": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 7}, "docs": {}, "df": 0}, "1": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 5}, "docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.fit": {"tf": 2}, "learnML.classification.LinearSVC": {"tf": 2}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.fit": {"tf": 2}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.7320508075688772}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 2.23606797749979}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 2.23606797749979}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 2}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.7320508075688772}}, "df": 27}, "1": {"0": {"0": {"0": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 11}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"learnML.classification.LogisticRegression": {"tf": 2}, "learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1}, "learnML.classification.LogisticRegression.predict": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 2.449489742783178}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 2.449489742783178}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 2}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.f1_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.r2_score": {"tf": 1.4142135623730951}, "learnML.utils.confusion_matrix": {"tf": 1.4142135623730951}, "learnML.utils.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_log_error": {"tf": 1.4142135623730951}}, "df": 39, "^": {"2": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 1}, "3": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}, "2": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 2.449489742783178}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 3}, "learnML.preprocessing.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 3}}, "df": 12, "^": {"2": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 1}, "3": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}, "3": {"9": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 6}, "docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 2}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2}}, "df": 5}, "5": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}}, "df": 4}, "6": {"docs": {"learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 2}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2}}, "df": 2}, "docs": {"learnML": {"tf": 12.288205727444508}, "learnML.classification": {"tf": 1.7320508075688772}, "learnML.classification.LogisticRegression": {"tf": 14.730919862656235}, "learnML.classification.LogisticRegression.__init__": {"tf": 9.539392014169456}, "learnML.classification.LogisticRegression.fit": {"tf": 8.12403840463596}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 5.656854249492381}, "learnML.classification.LogisticRegression.predict": {"tf": 5.656854249492381}, "learnML.classification.LogisticRegression.score": {"tf": 8.306623862918075}, "learnML.classification.LinearSVC": {"tf": 18.547236990991408}, "learnML.classification.LinearSVC.__init__": {"tf": 9.539392014169456}, "learnML.classification.LinearSVC.fit": {"tf": 8.06225774829855}, "learnML.classification.LinearSVC.predict": {"tf": 5.5677643628300215}, "learnML.classification.LinearSVC.score": {"tf": 8.18535277187245}, "learnML.interfaces": {"tf": 1.7320508075688772}, "learnML.interfaces.IModel": {"tf": 11.489125293076057}, "learnML.interfaces.IModel.fit": {"tf": 5.916079783099616}, "learnML.interfaces.IModel.predict": {"tf": 5.656854249492381}, "learnML.interfaces.IModel.score": {"tf": 6.557438524302}, "learnML.interfaces.IFeatureEngineering": {"tf": 16.0312195418814}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 4}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 4.69041575982343}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 5.5677643628300215}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 5.5677643628300215}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 5.5677643628300215}, "learnML.interfaces.IRegression": {"tf": 19.6468827043885}, "learnML.interfaces.IRegression.__init__": {"tf": 6.928203230275509}, "learnML.interfaces.IRegression.fit": {"tf": 5.916079783099616}, "learnML.interfaces.IRegression.predict": {"tf": 5.656854249492381}, "learnML.interfaces.IRegression.score": {"tf": 6.557438524302}, "learnML.interfaces.IRegression.get_cost_history": {"tf": 4.123105625617661}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 4.123105625617661}, "learnML.interfaces.IRegression.get_weights": {"tf": 4.123105625617661}, "learnML.interfaces.IRegression.get_intercept": {"tf": 4.123105625617661}, "learnML.preprocessing": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization": {"tf": 13.92838827718412}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 6.48074069840786}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 5}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 5.744562646538029}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 6.244997998398398}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 5.744562646538029}, "learnML.preprocessing.PolynomialFeatures": {"tf": 10.535653752852738}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 11.357816691600547}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 5.830951894845301}, "learnML.preprocessing.OneHotEncoder": {"tf": 10.954451150103322}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 6.557438524302}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 5}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 6.244997998398398}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 6.244997998398398}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 6.244997998398398}, "learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 4}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 4}, "learnML.preprocessing.train_test_split": {"tf": 1.7320508075688772}, "learnML.preprocessing.KFoldSplit": {"tf": 13.892443989449804}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 6.48074069840786}, "learnML.preprocessing.KFoldSplit.k": {"tf": 1.7320508075688772}, "learnML.preprocessing.KFoldSplit.split": {"tf": 3}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 6.244997998398398}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 11.489125293076057}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 5.385164807134504}, "learnML.preprocessing.OneLeaveOutSplit.randomize": {"tf": 3}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 6.244997998398398}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 13.601470508735444}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 13.892443989449804}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 6.48074069840786}, "learnML.preprocessing.train_test_split.KFoldSplit.k": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 3}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 6.244997998398398}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 11.489125293076057}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 5.385164807134504}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"tf": 3}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 6.244997998398398}, "learnML.regression": {"tf": 1.7320508075688772}, "learnML.regression.UnivariateLinearRegression": {"tf": 15.297058540778355}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 9.486832980505138}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 7.54983443527075}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 5.656854249492381}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 8.06225774829855}, "learnML.regression.LinearRegression": {"tf": 15.297058540778355}, "learnML.regression.LinearRegression.__init__": {"tf": 10.295630140987}, "learnML.regression.LinearRegression.fit": {"tf": 8.366600265340756}, "learnML.regression.LinearRegression.predict": {"tf": 6.164414002968976}, "learnML.regression.LinearRegression.score": {"tf": 8.306623862918075}, "learnML.regression.PolynomialRegression": {"tf": 15.033296378372908}, "learnML.regression.PolynomialRegression.__init__": {"tf": 14.798648586948742}, "learnML.utils": {"tf": 1.7320508075688772}, "learnML.utils.Metrics": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.confusion_matrix": {"tf": 3.7416573867739413}, "learnML.utils.Metrics.accuracy_score": {"tf": 3.7416573867739413}, "learnML.utils.Metrics.precision_score": {"tf": 3.7416573867739413}, "learnML.utils.Metrics.recall_score": {"tf": 3.7416573867739413}, "learnML.utils.Metrics.f1_score": {"tf": 3.7416573867739413}, "learnML.utils.Metrics.r2_score": {"tf": 3.7416573867739413}, "learnML.utils.confusion_matrix": {"tf": 3.7416573867739413}, "learnML.utils.accuracy_score": {"tf": 3.7416573867739413}, "learnML.utils.precision_score": {"tf": 3.7416573867739413}, "learnML.utils.recall_score": {"tf": 3.7416573867739413}, "learnML.utils.Errors": {"tf": 1.7320508075688772}, "learnML.utils.Errors.mean_squared_error": {"tf": 3.7416573867739413}, "learnML.utils.Errors.mean_absolute_error": {"tf": 3.7416573867739413}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 3.7416573867739413}, "learnML.utils.mean_squared_error": {"tf": 3.7416573867739413}, "learnML.utils.mean_absolute_error": {"tf": 3.7416573867739413}, "learnML.utils.mean_squared_log_error": {"tf": 3.7416573867739413}}, "df": 103, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"learnML": {"tf": 3.3166247903554}, "learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.interfaces.IModel": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 18}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML": {"tf": 2}, "learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.__init__": {"tf": 2.23606797749979}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 2.23606797749979}, "learnML.interfaces.IModel": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2.23606797749979}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 2.23606797749979}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.23606797749979}}, "df": 17}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.interfaces.IRegression": {"tf": 1}}, "df": 1}}, "s": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}}, "df": 2}}, "d": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}, "t": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.7320508075688772}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}}, "df": 1, "a": {"docs": {}, "df": 0, "r": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 3}, "learnML.regression.LinearRegression": {"tf": 3}, "learnML.regression.LinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.7320508075688772}}, "df": 8, "s": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "c": {"docs": {"learnML.classification.LinearSVC": {"tf": 2.8284271247461903}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.regression.LinearRegression": {"tf": 2.23606797749979}}, "df": 1}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"learnML": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1.4142135623730951}}, "df": 1, "d": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1.7320508075688772}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.23606797749979}}, "df": 13, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}}, "s": {"docs": {"learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"learnML.interfaces.IModel.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.score": {"tf": 1.4142135623730951}}, "df": 6}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {"learnML.utils.Errors.mean_squared_log_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_log_error": {"tf": 1.4142135623730951}}, "df": 2, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"learnML.classification.LogisticRegression": {"tf": 2}}, "df": 1, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression": {"tf": 2.23606797749979}}, "df": 1}}}}}}}}}}}}}}, "c": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 2}, "learnML.interfaces.IRegression": {"tf": 1.7320508075688772}}, "df": 2}}}, "w": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 5}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 5}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LinearSVC": {"tf": 3.605551275463989}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"learnML.interfaces.IRegression": {"tf": 1.4142135623730951}}, "df": 1}}, "o": {"docs": {"learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.7320508075688772}}, "df": 2}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 6}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 5}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}, "m": {"docs": {"learnML": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}}, "df": 4, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1.7320508075688772}, "learnML.classification.LogisticRegression": {"tf": 1}, "learnML.interfaces.IModel": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 8}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}}}, "y": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.__init__": {"tf": 1.7320508075688772}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.7320508075688772}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.7320508075688772}}, "df": 6}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 9}}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1.4142135623730951}, "learnML.utils.confusion_matrix": {"tf": 1.4142135623730951}}, "df": 3}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 6}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 6}}, "x": {"docs": {"learnML.classification.LinearSVC": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1, "s": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.classification.LinearSVC": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LinearSVC": {"tf": 2.6457513110645907}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 2.23606797749979}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.utils.Errors.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_log_error": {"tf": 1.4142135623730951}}, "df": 8, "t": {"docs": {"learnML": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML.utils.Metrics": {"tf": 1}, "learnML.utils.Errors": {"tf": 1}}, "df": 2, "s": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC": {"tf": 1.7320508075688772}, "learnML.interfaces.IModel": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression": {"tf": 1.7320508075688772}, "learnML.regression.PolynomialRegression": {"tf": 1.7320508075688772}}, "df": 13, "s": {"docs": {"learnML.interfaces.IModel": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"learnML.utils.Metrics": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 6}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"learnML": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 2}}}, "t": {"docs": {"learnML": {"tf": 1}}, "df": 1}, "n": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.classification.LinearSVC": {"tf": 2}}, "df": 1}}}, "e": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 4}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {"learnML.classification.LogisticRegression": {"tf": 3.4641016151377544}, "learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 3.1622776601683795}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel": {"tf": 2}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IModel.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression": {"tf": 4.358898943540674}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 3.3166247903554}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 3.4641016151377544}, "learnML.regression.LinearRegression.fit": {"tf": 2.23606797749979}, "learnML.regression.LinearRegression.predict": {"tf": 2}, "learnML.regression.PolynomialRegression": {"tf": 3.7416573867739413}, "learnML.utils.Metrics": {"tf": 1}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.accuracy_score": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.precision_score": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.recall_score": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.f1_score": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.r2_score": {"tf": 1.7320508075688772}, "learnML.utils.confusion_matrix": {"tf": 1.7320508075688772}, "learnML.utils.accuracy_score": {"tf": 1.7320508075688772}, "learnML.utils.precision_score": {"tf": 1.7320508075688772}, "learnML.utils.recall_score": {"tf": 1.7320508075688772}, "learnML.utils.Errors": {"tf": 1}, "learnML.utils.Errors.mean_squared_error": {"tf": 1.7320508075688772}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1.7320508075688772}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1.7320508075688772}, "learnML.utils.mean_squared_error": {"tf": 1.7320508075688772}, "learnML.utils.mean_absolute_error": {"tf": 1.7320508075688772}, "learnML.utils.mean_squared_log_error": {"tf": 1.7320508075688772}}, "df": 36, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 3}}}, "s": {"docs": {"learnML.interfaces.IModel": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}}, "df": 4}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 12}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 7}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 5}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}}, "df": 10}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.predict": {"tf": 1}}, "df": 2}}}}}}}}}}}, "x": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}}, "df": 1}}, "a": {"docs": {"learnML": {"tf": 2.8284271247461903}, "learnML.classification.LogisticRegression": {"tf": 2.449489742783178}, "learnML.classification.LogisticRegression.__init__": {"tf": 2.8284271247461903}, "learnML.classification.LinearSVC": {"tf": 3.3166247903554}, "learnML.classification.LinearSVC.__init__": {"tf": 2.8284271247461903}, "learnML.interfaces.IModel": {"tf": 2}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 3.1622776601683795}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 2.449489742783178}, "learnML.preprocessing.OneHotEncoder": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 2.23606797749979}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2.8284271247461903}, "learnML.regression.LinearRegression": {"tf": 2}, "learnML.regression.LinearRegression.__init__": {"tf": 3.1622776601683795}, "learnML.regression.LinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.7320508075688772}, "learnML.regression.PolynomialRegression.__init__": {"tf": 4}, "learnML.utils.Metrics": {"tf": 1.4142135623730951}, "learnML.utils.Errors": {"tf": 1.4142135623730951}}, "df": 24, "l": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {"learnML": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 5, "s": {"docs": {"learnML": {"tf": 2.449489742783178}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 3}}}}}}}}, "l": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IModel": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 2}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.449489742783178}}, "df": 10, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.interfaces.IModel": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 3}}}, "s": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 3}}}, "n": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.7320508075688772}, "learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneHotEncoder": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1.7320508075688772}}, "df": 19, "d": {"docs": {"learnML": {"tf": 2.8284271247461903}, "learnML.classification.LogisticRegression": {"tf": 2.23606797749979}, "learnML.classification.LogisticRegression.score": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 3.7416573867739413}, "learnML.classification.LinearSVC.score": {"tf": 1}, "learnML.interfaces.IModel": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 2}, "learnML.preprocessing.ZScoreNormalization": {"tf": 2.6457513110645907}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 2.449489742783178}, "learnML.preprocessing.OneHotEncoder": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1.7320508075688772}, "learnML.preprocessing.KFoldSplit": {"tf": 2.8284271247461903}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 2}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2.8284271247461903}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 2}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.regression.UnivariateLinearRegression": {"tf": 2}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 2.23606797749979}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 2}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.449489742783178}}, "df": 36}, "y": {"docs": {"learnML": {"tf": 1}}, "df": 1}}, "s": {"docs": {"learnML": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 2}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 18, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.regression.LinearRegression": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1, "s": {"docs": {"learnML.regression.LinearRegression": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 1.4142135623730951}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"learnML.utils.Metrics": {"tf": 1}, "learnML.utils.Metrics.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.Errors": {"tf": 1}}, "df": 4}}}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 2}, "s": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1.7320508075688772}, "learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 2}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 14}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.fit": {"tf": 2.6457513110645907}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.predict": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.score": {"tf": 2.23606797749979}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.fit": {"tf": 2}, "learnML.classification.LinearSVC.score": {"tf": 2}, "learnML.interfaces.IModel.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.score": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 2}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 2.23606797749979}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 2.6457513110645907}, "learnML.regression.LinearRegression.predict": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 2.23606797749979}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.23606797749979}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.f1_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.r2_score": {"tf": 1.4142135623730951}, "learnML.utils.confusion_matrix": {"tf": 1.4142135623730951}, "learnML.utils.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_log_error": {"tf": 1.4142135623730951}}, "df": 51}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2}, "learnML.regression.LinearRegression.__init__": {"tf": 2}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2}}, "df": 6}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 6}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 7}}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1, "s": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}}, "df": 1}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 4}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.interfaces.IModel": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 5}}}, "v": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1.7320508075688772}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1.7320508075688772}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.7320508075688772}}, "df": 8, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"learnML.interfaces.IModel": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}}, "df": 3}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML.utils.Errors.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_absolute_error": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}}, "df": 2}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"learnML.regression.LinearRegression": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LogisticRegression.fit": {"tf": 2.449489742783178}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 2}, "learnML.classification.LogisticRegression.predict": {"tf": 2}, "learnML.classification.LogisticRegression.score": {"tf": 2}, "learnML.classification.LinearSVC": {"tf": 2}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 2.449489742783178}, "learnML.classification.LinearSVC.predict": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.score": {"tf": 1.7320508075688772}, "learnML.interfaces.IModel.fit": {"tf": 2.23606797749979}, "learnML.interfaces.IModel.predict": {"tf": 2.23606797749979}, "learnML.interfaces.IModel.score": {"tf": 2.23606797749979}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 2}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 2}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 2}, "learnML.interfaces.IRegression": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 2.23606797749979}, "learnML.interfaces.IRegression.predict": {"tf": 2.23606797749979}, "learnML.interfaces.IRegression.score": {"tf": 2.23606797749979}, "learnML.preprocessing.ZScoreNormalization": {"tf": 2.23606797749979}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 2}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 2}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 2}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 2}, "learnML.preprocessing.train_test_split": {"tf": 2}, "learnML.preprocessing.KFoldSplit": {"tf": 2}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 2}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 2}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 2}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 2}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 2}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 3}, "learnML.regression.LinearRegression.predict": {"tf": 2.6457513110645907}, "learnML.regression.LinearRegression.score": {"tf": 2.23606797749979}, "learnML.regression.PolynomialRegression": {"tf": 1.7320508075688772}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}, "learnML.utils.Metrics.confusion_matrix": {"tf": 2}, "learnML.utils.Metrics.accuracy_score": {"tf": 2}, "learnML.utils.Metrics.precision_score": {"tf": 2}, "learnML.utils.Metrics.recall_score": {"tf": 2}, "learnML.utils.Metrics.f1_score": {"tf": 2}, "learnML.utils.Metrics.r2_score": {"tf": 2}, "learnML.utils.confusion_matrix": {"tf": 2}, "learnML.utils.accuracy_score": {"tf": 2}, "learnML.utils.precision_score": {"tf": 2}, "learnML.utils.recall_score": {"tf": 2}, "learnML.utils.Errors.mean_squared_error": {"tf": 2}, "learnML.utils.Errors.mean_absolute_error": {"tf": 2}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 2}, "learnML.utils.mean_squared_error": {"tf": 2}, "learnML.utils.mean_absolute_error": {"tf": 2}, "learnML.utils.mean_squared_log_error": {"tf": 2}}, "df": 68, "o": {"docs": {}, "df": 0, "t": {"docs": {"learnML": {"tf": 1.7320508075688772}, "learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.fit": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.fit": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 18, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1}}, "n": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 4, "e": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LogisticRegression.fit": {"tf": 2.449489742783178}, "learnML.classification.LogisticRegression.score": {"tf": 2}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 2.449489742783178}, "learnML.classification.LinearSVC.score": {"tf": 1.7320508075688772}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1.7320508075688772}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 2.449489742783178}, "learnML.regression.LinearRegression.score": {"tf": 2}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 40}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 3.1622776601683795}}, "df": 1}}}}}, "e": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1, "d": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 2.449489742783178}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 2.23606797749979}}, "df": 6}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}}, "df": 2}}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "w": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LogisticRegression": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 6}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 2}, "learnML.classification.LinearSVC": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.__init__": {"tf": 2}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2}, "learnML.regression.LinearRegression.__init__": {"tf": 2}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2}}, "df": 14}}}}}, "p": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.fit": {"tf": 2}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.predict": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.score": {"tf": 2.23606797749979}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.fit": {"tf": 2}, "learnML.classification.LinearSVC.predict": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.score": {"tf": 2.23606797749979}, "learnML.interfaces.IModel.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.score": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.score": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression.get_cost_history": {"tf": 1}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 1}, "learnML.interfaces.IRegression.get_weights": {"tf": 1}, "learnML.interfaces.IRegression.get_intercept": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split": {"tf": 3}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 2}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 2}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 3}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 2}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 2}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 2}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 2.23606797749979}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 2}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 2.23606797749979}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.accuracy_score": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.precision_score": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.recall_score": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.f1_score": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.r2_score": {"tf": 1.7320508075688772}, "learnML.utils.confusion_matrix": {"tf": 1.7320508075688772}, "learnML.utils.accuracy_score": {"tf": 1.7320508075688772}, "learnML.utils.precision_score": {"tf": 1.7320508075688772}, "learnML.utils.recall_score": {"tf": 1.7320508075688772}, "learnML.utils.Errors.mean_squared_error": {"tf": 1.7320508075688772}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1.7320508075688772}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1.7320508075688772}, "learnML.utils.mean_squared_error": {"tf": 1.7320508075688772}, "learnML.utils.mean_absolute_error": {"tf": 1.7320508075688772}, "learnML.utils.mean_squared_log_error": {"tf": 1.7320508075688772}}, "df": 68}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LogisticRegression.fit": {"tf": 1.7320508075688772}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.predict": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.score": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.fit": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.predict": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.score": {"tf": 1.7320508075688772}, "learnML.interfaces.IModel.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.get_cost_history": {"tf": 1}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 1}, "learnML.interfaces.IRegression.get_weights": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split": {"tf": 3.1622776601683795}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 2.449489742783178}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 2.449489742783178}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 3.1622776601683795}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 2.449489742783178}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 2.449489742783178}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.f1_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.r2_score": {"tf": 1.4142135623730951}, "learnML.utils.confusion_matrix": {"tf": 1.7320508075688772}, "learnML.utils.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_log_error": {"tf": 1.4142135623730951}}, "df": 65}}}}}}, "^": {"2": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 1}, "3": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "t": {"docs": {}, "df": 0, "h": {"docs": {"learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}}, "df": 4, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}}, "df": 4}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}}, "df": 3, "e": {"docs": {"learnML": {"tf": 4.69041575982343}, "learnML.classification.LogisticRegression": {"tf": 4.358898943540674}, "learnML.classification.LogisticRegression.__init__": {"tf": 4}, "learnML.classification.LogisticRegression.fit": {"tf": 3.4641016151377544}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 2.23606797749979}, "learnML.classification.LogisticRegression.predict": {"tf": 2}, "learnML.classification.LogisticRegression.score": {"tf": 3.4641016151377544}, "learnML.classification.LinearSVC": {"tf": 7.874007874011811}, "learnML.classification.LinearSVC.__init__": {"tf": 4}, "learnML.classification.LinearSVC.fit": {"tf": 3.4641016151377544}, "learnML.classification.LinearSVC.predict": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.score": {"tf": 3.3166247903554}, "learnML.interfaces.IModel": {"tf": 2.449489742783178}, "learnML.interfaces.IModel.fit": {"tf": 2.449489742783178}, "learnML.interfaces.IModel.predict": {"tf": 2.449489742783178}, "learnML.interfaces.IModel.score": {"tf": 2.8284271247461903}, "learnML.interfaces.IFeatureEngineering": {"tf": 4}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 2}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 2}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 2.23606797749979}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 2}, "learnML.interfaces.IRegression": {"tf": 3.7416573867739413}, "learnML.interfaces.IRegression.__init__": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression.fit": {"tf": 2.449489742783178}, "learnML.interfaces.IRegression.predict": {"tf": 2.449489742783178}, "learnML.interfaces.IRegression.score": {"tf": 2.8284271247461903}, "learnML.interfaces.IRegression.get_cost_history": {"tf": 2}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 2}, "learnML.interfaces.IRegression.get_weights": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.get_intercept": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization": {"tf": 5}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 3.1622776601683795}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 2.6457513110645907}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 3.1622776601683795}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 3.1622776601683795}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 3.1622776601683795}, "learnML.preprocessing.PolynomialFeatures": {"tf": 4}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 4.795831523312719}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 2.8284271247461903}, "learnML.preprocessing.OneHotEncoder": {"tf": 3.7416573867739413}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 3.1622776601683795}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 2.6457513110645907}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 2.8284271247461903}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 2.8284271247461903}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 2.8284271247461903}, "learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 2}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split": {"tf": 4}, "learnML.preprocessing.KFoldSplit": {"tf": 5.291502622129181}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 2.23606797749979}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 2.6457513110645907}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 3.605551275463989}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 2}, "learnML.preprocessing.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 2.6457513110645907}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 4}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 5.291502622129181}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 2.23606797749979}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 2.6457513110645907}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 3.605551275463989}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 2}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 2.6457513110645907}, "learnML.regression.UnivariateLinearRegression": {"tf": 5.0990195135927845}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 4.242640687119285}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 2.23606797749979}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1.7320508075688772}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 2.449489742783178}, "learnML.regression.LinearRegression": {"tf": 5.196152422706632}, "learnML.regression.LinearRegression.__init__": {"tf": 4.47213595499958}, "learnML.regression.LinearRegression.fit": {"tf": 3.872983346207417}, "learnML.regression.LinearRegression.predict": {"tf": 2.6457513110645907}, "learnML.regression.LinearRegression.score": {"tf": 3.1622776601683795}, "learnML.regression.PolynomialRegression": {"tf": 6}, "learnML.regression.PolynomialRegression.__init__": {"tf": 6.48074069840786}, "learnML.utils.Metrics": {"tf": 1}, "learnML.utils.Metrics.confusion_matrix": {"tf": 2.449489742783178}, "learnML.utils.Metrics.accuracy_score": {"tf": 2}, "learnML.utils.Metrics.precision_score": {"tf": 2}, "learnML.utils.Metrics.recall_score": {"tf": 2}, "learnML.utils.Metrics.f1_score": {"tf": 2}, "learnML.utils.Metrics.r2_score": {"tf": 2}, "learnML.utils.confusion_matrix": {"tf": 2}, "learnML.utils.accuracy_score": {"tf": 2}, "learnML.utils.precision_score": {"tf": 2}, "learnML.utils.recall_score": {"tf": 2}, "learnML.utils.Errors": {"tf": 1}, "learnML.utils.Errors.mean_squared_error": {"tf": 2}, "learnML.utils.Errors.mean_absolute_error": {"tf": 2}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 2}, "learnML.utils.mean_squared_error": {"tf": 2}, "learnML.utils.mean_absolute_error": {"tf": 2}, "learnML.utils.mean_squared_log_error": {"tf": 2}}, "df": 96, "s": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 6}}, "n": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LogisticRegression.fit": {"tf": 2}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.fit": {"tf": 2}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 2}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.7320508075688772}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 2}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 2.449489742783178}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.7320508075688772}}, "df": 30}, "m": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}}, "df": 2}, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"learnML.interfaces.IModel": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 2}, "learnML.classification.LinearSVC": {"tf": 2}, "learnML.preprocessing.ZScoreNormalization": {"tf": 2}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 6}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"learnML": {"tf": 2}, "learnML.classification.LinearSVC": {"tf": 2}, "learnML.interfaces.IModel": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression": {"tf": 1.7320508075688772}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 11}, "n": {"docs": {"learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression": {"tf": 2.449489742783178}, "learnML.preprocessing.train_test_split": {"tf": 3.1622776601683795}, "learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 3.1622776601683795}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression": {"tf": 1.7320508075688772}, "learnML.regression.PolynomialRegression": {"tf": 1.7320508075688772}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1}, "learnML.utils.Metrics.accuracy_score": {"tf": 1}, "learnML.utils.Metrics.precision_score": {"tf": 1}, "learnML.utils.Metrics.recall_score": {"tf": 1}, "learnML.utils.Metrics.f1_score": {"tf": 1}, "learnML.utils.Metrics.r2_score": {"tf": 1}, "learnML.utils.confusion_matrix": {"tf": 1}, "learnML.utils.accuracy_score": {"tf": 1}, "learnML.utils.precision_score": {"tf": 1}, "learnML.utils.recall_score": {"tf": 1}, "learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_error": {"tf": 1}, "learnML.utils.mean_absolute_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 32, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 2.23606797749979}, "learnML.preprocessing.KFoldSplit": {"tf": 2.449489742783178}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 2}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 2.23606797749979}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2.449489742783178}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 2}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1}, "learnML.utils.Metrics.accuracy_score": {"tf": 1}, "learnML.utils.Metrics.precision_score": {"tf": 1}, "learnML.utils.Metrics.recall_score": {"tf": 1}, "learnML.utils.Metrics.f1_score": {"tf": 1}, "learnML.utils.Metrics.r2_score": {"tf": 1}, "learnML.utils.confusion_matrix": {"tf": 1}, "learnML.utils.accuracy_score": {"tf": 1}, "learnML.utils.precision_score": {"tf": 1}, "learnML.utils.recall_score": {"tf": 1}, "learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_error": {"tf": 1}, "learnML.utils.mean_absolute_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 28}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {"learnML.classification.LinearSVC": {"tf": 2}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 2, "s": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {"learnML": {"tf": 2.6457513110645907}, "learnML.classification.LogisticRegression": {"tf": 2.449489742783178}, "learnML.classification.LogisticRegression.__init__": {"tf": 2.6457513110645907}, "learnML.classification.LogisticRegression.fit": {"tf": 2.23606797749979}, "learnML.classification.LinearSVC": {"tf": 4}, "learnML.classification.LinearSVC.__init__": {"tf": 2.6457513110645907}, "learnML.classification.LinearSVC.fit": {"tf": 2.23606797749979}, "learnML.interfaces.IModel": {"tf": 1.7320508075688772}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.__init__": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 2.6457513110645907}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 2.449489742783178}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder": {"tf": 2}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 2}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 2}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 3}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2.6457513110645907}, "learnML.regression.LinearRegression": {"tf": 3.3166247903554}, "learnML.regression.LinearRegression.__init__": {"tf": 2.8284271247461903}, "learnML.regression.LinearRegression.fit": {"tf": 2}, "learnML.regression.PolynomialRegression": {"tf": 2.449489742783178}, "learnML.regression.PolynomialRegression.__init__": {"tf": 3}, "learnML.utils.Metrics": {"tf": 1}, "learnML.utils.Errors": {"tf": 1}}, "df": 45}, "x": {"docs": {}, "df": 0, "t": {"docs": {"learnML": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}}, "df": 1}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 5, "s": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 2.449489742783178}, "learnML.regression.PolynomialRegression": {"tf": 2}}, "df": 6, "s": {"docs": {"learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IModel.predict": {"tf": 1}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.interfaces.IRegression.predict": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1}}, "df": 6}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression": {"tf": 2}, "learnML.preprocessing.train_test_split": {"tf": 2.8284271247461903}, "learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 2.8284271247461903}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 18, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 2}, "learnML.interfaces.IRegression": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split": {"tf": 2}, "learnML.preprocessing.KFoldSplit": {"tf": 2.449489742783178}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 2}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 2}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2.449489742783178}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 2}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.7320508075688772}}, "df": 18}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}}, "df": 6}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 2.6457513110645907}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 2.6457513110645907}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 2}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 2.449489742783178}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}}, "df": 12, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneHotEncoder": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}}, "df": 8}}, "s": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 7}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1, "s": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 7}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"learnML.classification.LinearSVC": {"tf": 1.4142135623730951}}, "df": 1}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1.4142135623730951}}, "df": 6}}}}}}}}, "r": {"2": {"docs": {"learnML.utils.Metrics.r2_score": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {"learnML": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"learnML": {"tf": 3.1622776601683795}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}}, "df": 2}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"learnML": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1, "d": {"docs": {"learnML": {"tf": 1}}, "df": 1}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression": {"tf": 2}, "learnML.interfaces.IRegression": {"tf": 2.8284271247461903}, "learnML.regression.UnivariateLinearRegression": {"tf": 2.449489742783178}, "learnML.regression.LinearRegression": {"tf": 2.6457513110645907}, "learnML.regression.LinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 2.8284271247461903}}, "df": 7}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 2}, "learnML.classification.LinearSVC": {"tf": 2.6457513110645907}, "learnML.classification.LinearSVC.__init__": {"tf": 2}, "learnML.regression.LinearRegression.__init__": {"tf": 2}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2}}, "df": 5}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 4, "s": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 2}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression.score": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1}, "learnML.interfaces.IRegression.get_cost_history": {"tf": 1}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 1}, "learnML.interfaces.IRegression.get_weights": {"tf": 1}, "learnML.interfaces.IRegression.get_intercept": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression.predict": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}}, "df": 10, "s": {"docs": {"learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1}, "learnML.classification.LogisticRegression.predict": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.predict": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IModel.predict": {"tf": 1}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.interfaces.IRegression.predict": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.interfaces.IRegression.get_cost_history": {"tf": 1}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 1}, "learnML.interfaces.IRegression.get_weights": {"tf": 1}, "learnML.interfaces.IRegression.get_intercept": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.predict": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.f1_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.r2_score": {"tf": 1.4142135623730951}, "learnML.utils.confusion_matrix": {"tf": 1.4142135623730951}, "learnML.utils.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_log_error": {"tf": 1.4142135623730951}}, "df": 62}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}}, "df": 2}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"learnML.utils.Metrics.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.recall_score": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 2.23606797749979}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 2.23606797749979}, "learnML.interfaces.IRegression": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2.23606797749979}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 2.23606797749979}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.23606797749979}}, "df": 12}}, "w": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1}}, "df": 1}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1.7320508075688772}}, "df": 2}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.7320508075688772}}, "df": 2, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {"learnML.classification.LinearSVC": {"tf": 3.4641016151377544}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.7320508075688772}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}}, "df": 4, "s": {"docs": {"learnML": {"tf": 2.8284271247461903}, "learnML.classification.LogisticRegression": {"tf": 1.7320508075688772}, "learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 5}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 2.23606797749979}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 2}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneHotEncoder": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 2}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.regression.UnivariateLinearRegression": {"tf": 3}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2}, "learnML.regression.LinearRegression": {"tf": 2}, "learnML.regression.LinearRegression.__init__": {"tf": 2}, "learnML.regression.LinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 2.23606797749979}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.6457513110645907}}, "df": 36, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {"learnML": {"tf": 1.7320508075688772}, "learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IModel": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2}}, "df": 23, "t": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 16, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.fit": {"tf": 1.7320508075688772}, "learnML.classification.LogisticRegression.score": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC": {"tf": 2.23606797749979}, "learnML.classification.LinearSVC.fit": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.score": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression.get_intercept": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression.score": {"tf": 1.7320508075688772}}, "df": 14}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"learnML.interfaces.IModel": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 2}}}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"learnML.interfaces.IModel": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression": {"tf": 2}}, "df": 3, "s": {"docs": {"learnML.interfaces.IModel": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}}, "df": 3}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 2.449489742783178}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.449489742783178}}, "df": 2}}}}}, "o": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 2.449489742783178}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2.449489742783178}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 15}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 5, "d": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"learnML": {"tf": 2}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit": {"tf": 2}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 2}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 2}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 14}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 2}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression": {"tf": 2}, "learnML.classification.LogisticRegression.__init__": {"tf": 2}, "learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.predict": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.score": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.__init__": {"tf": 2}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.predict": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IModel.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.interfaces.IRegression.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 2}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 2.23606797749979}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1.7320508075688772}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.7320508075688772}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression.__init__": {"tf": 2}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.predict": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 2.23606797749979}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.6457513110645907}}, "df": 56}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression": {"tf": 1.4142135623730951}}, "df": 2, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML.regression.UnivariateLinearRegression.fit": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}}, "df": 2, "d": {"docs": {"learnML.classification.LogisticRegression.fit": {"tf": 2}, "learnML.classification.LinearSVC.fit": {"tf": 2}, "learnML.regression.LinearRegression.fit": {"tf": 2}}, "df": 3}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {"learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 2.6457513110645907}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 2.449489742783178}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 8, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1.7320508075688772}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 2}}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"learnML.interfaces.IModel": {"tf": 1}}, "df": 1, "s": {"docs": {"learnML.interfaces.IModel": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 2}, "learnML.preprocessing.ZScoreNormalization": {"tf": 2.23606797749979}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 2}, "learnML.preprocessing.OneHotEncoder": {"tf": 2.23606797749979}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1.4142135623730951}}, "df": 5}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1}}, "df": 1}}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"learnML": {"tf": 1}, "learnML.interfaces.IModel": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 2}, "learnML.interfaces.IRegression": {"tf": 1.7320508075688772}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.interfaces.IModel": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 3}}}}}, "s": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 17}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"learnML.interfaces.IModel": {"tf": 2.449489742783178}, "learnML.interfaces.IRegression": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IModel": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 2}, "learnML.preprocessing.OneHotEncoder": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.449489742783178}}, "df": 19, "s": {"docs": {"learnML": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 5, "s": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 2.23606797749979}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 2.23606797749979}, "learnML.interfaces.IRegression": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2.23606797749979}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 2.23606797749979}, "learnML.regression.PolynomialRegression": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.23606797749979}}, "df": 12}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}}}, "f": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 1.7320508075688772}, "learnML.classification.LogisticRegression.fit": {"tf": 2}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.fit": {"tf": 2}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 2}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.7320508075688772}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 2}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2.23606797749979}, "learnML.regression.LinearRegression.__init__": {"tf": 2.23606797749979}, "learnML.regression.LinearRegression.fit": {"tf": 2.449489742783178}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.8284271247461903}}, "df": 32, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 2.23606797749979}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.interfaces.IRegression": {"tf": 1}}, "df": 1}}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.interfaces.IRegression": {"tf": 2}}, "df": 1}}}}}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}}, "df": 7}}}}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"learnML.interfaces.IModel": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression": {"tf": 1.4142135623730951}}, "df": 3, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"learnML.interfaces.IModel": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.interfaces.IRegression": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {"learnML": {"tf": 1}}, "df": 1, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {"learnML": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1, "d": {"docs": {"learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 2}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.interfaces.IModel": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 3}}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}}, "df": 4, "s": {"docs": {"learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 2}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 2}, "learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1.4142135623730951}}, "df": 7}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.interfaces.IModel.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.score": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1}}, "df": 7}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"learnML": {"tf": 1.4142135623730951}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}}, "df": 2, "s": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"learnML.interfaces.IRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 2}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.__init__": {"tf": 1.7320508075688772}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression.__init__": {"tf": 1.7320508075688772}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.7320508075688772}}, "df": 5}}, "t": {"docs": {"learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"learnML.interfaces.IModel": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"learnML.interfaces.IFeatureEngineering.fit": {"tf": null}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": null}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": null}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": null}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": null}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": null}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": null}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": null}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": null}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": null}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": null}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": null}}, "df": 12}}}}}}}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.utils.Metrics.confusion_matrix": {"tf": 1.4142135623730951}, "learnML.utils.confusion_matrix": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression.get_cost_history": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 11}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 6}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"learnML.regression.LinearRegression": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LogisticRegression": {"tf": 2}, "learnML.classification.LinearSVC": {"tf": 2}, "learnML.interfaces.IModel": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization": {"tf": 2.449489742783178}, "learnML.preprocessing.PolynomialFeatures": {"tf": 2.6457513110645907}, "learnML.preprocessing.OneHotEncoder": {"tf": 2.6457513110645907}, "learnML.preprocessing.KFoldSplit": {"tf": 2}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 2.23606797749979}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 2.23606797749979}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}, "learnML.utils.Metrics": {"tf": 1}, "learnML.utils.Errors": {"tf": 1}}, "df": 18, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC": {"tf": 2}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.classification.LinearSVC": {"tf": 1.4142135623730951}}, "df": 1}, "d": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LinearSVC": {"tf": 2.23606797749979}, "learnML.interfaces.IModel": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1.4142135623730951}}, "df": 1}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LinearSVC": {"tf": 1.4142135623730951}}, "df": 1}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}}, "df": 2}}}}, "d": {"docs": {"learnML": {"tf": 1}}, "df": 1}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 15, "d": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}}, "df": 6}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"learnML": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 8}, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 8, "d": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.4142135623730951}}, "df": 7, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML.preprocessing.OneHotEncoder": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1.4142135623730951}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"learnML": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "p": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 2}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}}, "df": 4, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "p": {"docs": {"learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1.4142135623730951}}, "df": 5}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 2}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.predict": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 2.23606797749979}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 11, "d": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 17}, "s": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}}, "df": 4}, "r": {"docs": {}, "df": 0, "s": {"docs": {"learnML.interfaces.IModel": {"tf": 1}}, "df": 1}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML": {"tf": 2}, "learnML.classification.LogisticRegression": {"tf": 2}, "learnML.classification.LinearSVC": {"tf": 2.23606797749979}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 2}, "learnML.regression.LinearRegression": {"tf": 1.7320508075688772}, "learnML.regression.PolynomialRegression": {"tf": 2.23606797749979}, "learnML.utils.Metrics": {"tf": 1}, "learnML.utils.Errors": {"tf": 1}}, "df": 21}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.interfaces.IModel": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 17}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 3}}}}}}, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LinearSVC": {"tf": 1.4142135623730951}}, "df": 1, "d": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 6}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 2.23606797749979}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"learnML": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {"learnML.interfaces.IModel": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering": {"tf": 2.23606797749979}, "learnML.interfaces.IRegression": {"tf": 2}}, "df": 3, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 2.449489742783178}, "learnML.classification.LogisticRegression.fit": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 2.449489742783178}, "learnML.classification.LinearSVC.fit": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.score": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2.449489742783178}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 2.6457513110645907}, "learnML.regression.LinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.8284271247461903}}, "df": 31}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"learnML.interfaces.IModel": {"tf": 1}}, "df": 1, "d": {"docs": {"learnML.classification.LinearSVC": {"tf": 1.4142135623730951}}, "df": 1}, "s": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}}, "df": 1, "s": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 6}, "d": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}}}}, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.__init__": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression.__init__": {"tf": 1.7320508075688772}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.7320508075688772}}, "df": 6}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LinearSVC": {"tf": 2.23606797749979}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1.7320508075688772}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 3.4641016151377544}, "learnML.regression.PolynomialRegression": {"tf": 2.449489742783178}, "learnML.regression.PolynomialRegression.__init__": {"tf": 3.4641016151377544}}, "df": 5, "s": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"learnML": {"tf": 1}, "learnML.interfaces.IModel": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 3}, "c": {"docs": {}, "df": 0, "e": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 3}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 4}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1}}, "df": 1, "[": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.7320508075688772}}, "df": 3}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"learnML.classification.LogisticRegression": {"tf": 2.6457513110645907}, "learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 3.3166247903554}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.fit": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.predict": {"tf": 1.7320508075688772}, "learnML.interfaces.IModel.fit": {"tf": 1.7320508075688772}, "learnML.interfaces.IModel.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering": {"tf": 3.872983346207417}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression.fit": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.score": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization": {"tf": 3.3166247903554}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 2.6457513110645907}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 2.8284271247461903}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 3.1622776601683795}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 2.8284271247461903}, "learnML.preprocessing.PolynomialFeatures": {"tf": 2.23606797749979}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 2.6457513110645907}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 2.6457513110645907}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 2.449489742783178}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 2.449489742783178}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 2.449489742783178}, "learnML.preprocessing.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit": {"tf": 2.6457513110645907}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2.6457513110645907}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.randomize": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 2.23606797749979}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2}, "learnML.regression.LinearRegression": {"tf": 2.23606797749979}, "learnML.regression.LinearRegression.__init__": {"tf": 2}, "learnML.regression.PolynomialRegression": {"tf": 2.449489742783178}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2}}, "df": 55, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}}, "df": 4, "s": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML": {"tf": 2.23606797749979}}, "df": 1}}}}}}}}}}, "s": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {"learnML.classification.LogisticRegression": {"tf": 2}, "learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 3.1622776601683795}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 2.449489742783178}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 2.8284271247461903}, "learnML.preprocessing.KFoldSplit": {"tf": 2.23606797749979}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 2.8284271247461903}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2.23606797749979}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1.7320508075688772}, "learnML.regression.UnivariateLinearRegression": {"tf": 2.23606797749979}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 2}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 2.23606797749979}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.f1_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.r2_score": {"tf": 1.4142135623730951}, "learnML.utils.confusion_matrix": {"tf": 1.4142135623730951}, "learnML.utils.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_log_error": {"tf": 1.4142135623730951}}, "df": 53, "e": {"docs": {}, "df": 0, "t": {"docs": {"learnML": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "u": {"docs": {"learnML": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 3, "r": {"docs": {"learnML": {"tf": 2}, "learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 8}}}}, "f": {"1": {"docs": {"learnML.utils.Metrics.f1_score": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"learnML": {"tf": 2.6457513110645907}, "learnML.classification.LogisticRegression": {"tf": 1.7320508075688772}, "learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 3.3166247903554}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IModel": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering": {"tf": 2.6457513110645907}, "learnML.interfaces.IRegression": {"tf": 2}, "learnML.preprocessing.ZScoreNormalization": {"tf": 2}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 2.23606797749979}, "learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.6457513110645907}}, "df": 27, "k": {"docs": {"learnML": {"tf": 1}}, "df": 1}, "m": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 3}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"learnML": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 13, "s": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}}, "df": 4}}}}}}, "d": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 2.23606797749979}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2.23606797749979}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1.4142135623730951}}, "df": 10, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML": {"tf": 1.4142135623730951}}, "df": 1}}, "s": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 2.23606797749979}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2.23606797749979}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}}, "df": 4}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML.interfaces.IModel": {"tf": 1}}, "df": 1}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 2.449489742783178}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.7320508075688772}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 20}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.regression.LinearRegression": {"tf": 1}}, "df": 1}}}}}}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 5}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"learnML.classification.LogisticRegression": {"tf": 2}, "learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 2}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.interfaces.IModel": {"tf": 1.7320508075688772}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 2}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 2}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 2}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 2}, "learnML.regression.LinearRegression": {"tf": 2}, "learnML.regression.PolynomialRegression": {"tf": 2.23606797749979}}, "df": 20, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 2.23606797749979}, "learnML.interfaces.IRegression.get_cost_history": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 3}}}}}}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"learnML": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.__init__": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering": {"tf": 3.872983346207417}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 2}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2.449489742783178}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 2.449489742783178}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.8284271247461903}}, "df": 16, "s": {"docs": {"learnML.classification.LogisticRegression": {"tf": 2}, "learnML.classification.LogisticRegression.fit": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.predict": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.fit": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.predict": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IModel.predict": {"tf": 1}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.interfaces.IRegression.predict": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 2}, "learnML.preprocessing.PolynomialFeatures": {"tf": 3.3166247903554}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 3.605551275463989}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 2}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split": {"tf": 2.6457513110645907}, "learnML.preprocessing.KFoldSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 2}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 2}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 2.6457513110645907}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 2}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 2}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression.predict": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 2}, "learnML.regression.PolynomialRegression.__init__": {"tf": 3.4641016151377544}}, "df": 44}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"6": {"4": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.interfaces.IRegression.get_intercept": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.accuracy_score": {"tf": 1}, "learnML.utils.Metrics.precision_score": {"tf": 1}, "learnML.utils.Metrics.recall_score": {"tf": 1}, "learnML.utils.Metrics.f1_score": {"tf": 1}, "learnML.utils.Metrics.r2_score": {"tf": 1}, "learnML.utils.accuracy_score": {"tf": 1}, "learnML.utils.precision_score": {"tf": 1}, "learnML.utils.recall_score": {"tf": 1}, "learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_error": {"tf": 1}, "learnML.utils.mean_absolute_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 32}, "docs": {}, "df": 0}, "docs": {"learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"learnML": {"tf": 1}}, "df": 1, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"learnML": {"tf": 1.4142135623730951}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.fit": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1}, "learnML.classification.LogisticRegression.predict": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.score": {"tf": 1}, "learnML.interfaces.IModel.predict": {"tf": 1}, "learnML.interfaces.IRegression.predict": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 2}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression.predict": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2}}, "df": 20}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "f": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"learnML": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 2.449489742783178}, "learnML.preprocessing.OneHotEncoder.get_categories": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 2}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 2}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 2}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}}, "df": 12}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 2}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2}}, "df": 3, "d": {"docs": {"learnML": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.7320508075688772}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.7320508075688772}}, "df": 3}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 1}}}, "l": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}}, "df": 3}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"learnML": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 2}}, "df": 2, "s": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}, "w": {"1": {"docs": {"learnML.regression.LinearRegression": {"tf": 1.4142135623730951}}, "df": 1}, "2": {"docs": {"learnML.regression.LinearRegression": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {"learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 2.23606797749979}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}}, "df": 9, "e": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression.fit": {"tf": 1.7320508075688772}, "learnML.classification.LogisticRegression.score": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.fit": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression.score": {"tf": 1.7320508075688772}}, "df": 10, "s": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 2}, "learnML.classification.LinearSVC": {"tf": 2.23606797749979}, "learnML.classification.LinearSVC.__init__": {"tf": 2}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression.get_weights": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 2}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2}}, "df": 11}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LogisticRegression": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1.7320508075688772}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.7320508075688772}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.7320508075688772}}, "df": 8, "i": {"docs": {}, "df": 0, "n": {"docs": {"learnML.interfaces.IModel": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}}, "df": 4}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 2.449489742783178}, "learnML.classification.LogisticRegression.fit": {"tf": 2}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 2.449489742783178}, "learnML.classification.LinearSVC.fit": {"tf": 2}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 2}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.7320508075688772}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 2}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2.6457513110645907}, "learnML.regression.LinearRegression.__init__": {"tf": 2.8284271247461903}, "learnML.regression.LinearRegression.fit": {"tf": 2.449489742783178}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 3.3166247903554}}, "df": 25}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"learnML": {"tf": 1}}, "df": 1, "s": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"learnML": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 3}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 2}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 5}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 6}}}}, "n": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}}, "df": 2}}}, "|": {"docs": {}, "df": 0, "|": {"docs": {}, "df": 0, "^": {"2": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}, "n": {"docs": {"learnML.regression.LinearRegression": {"tf": 1.4142135623730951}}, "df": 1}, "a": {"docs": {}, "df": 0, "s": {"docs": {"learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {"learnML": {"tf": 1.7320508075688772}, "learnML.classification.LogisticRegression": {"tf": 3}, "learnML.classification.LogisticRegression.__init__": {"tf": 2}, "learnML.classification.LogisticRegression.fit": {"tf": 2}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1.7320508075688772}, "learnML.classification.LogisticRegression.predict": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.score": {"tf": 2.23606797749979}, "learnML.classification.LinearSVC": {"tf": 4}, "learnML.classification.LinearSVC.__init__": {"tf": 2}, "learnML.classification.LinearSVC.fit": {"tf": 2.23606797749979}, "learnML.classification.LinearSVC.predict": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.score": {"tf": 2}, "learnML.interfaces.IModel": {"tf": 2}, "learnML.interfaces.IModel.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.score": {"tf": 2}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.score": {"tf": 2}, "learnML.interfaces.IRegression.get_cost_history": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization": {"tf": 3.605551275463989}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 2.449489742783178}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 4.242640687119285}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneHotEncoder": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 2.6457513110645907}, "learnML.preprocessing.KFoldSplit": {"tf": 3}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.7320508075688772}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 2}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 2.6457513110645907}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 3}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 2}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 2}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1.7320508075688772}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 2}, "learnML.regression.LinearRegression.__init__": {"tf": 2}, "learnML.regression.LinearRegression.fit": {"tf": 2}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 3}, "learnML.regression.PolynomialRegression.__init__": {"tf": 4.58257569495584}, "learnML.utils.Metrics": {"tf": 1}, "learnML.utils.Metrics.confusion_matrix": {"tf": 2}, "learnML.utils.Metrics.accuracy_score": {"tf": 2}, "learnML.utils.Metrics.precision_score": {"tf": 2}, "learnML.utils.Metrics.recall_score": {"tf": 2}, "learnML.utils.Metrics.f1_score": {"tf": 2}, "learnML.utils.Metrics.r2_score": {"tf": 2}, "learnML.utils.confusion_matrix": {"tf": 2}, "learnML.utils.accuracy_score": {"tf": 2}, "learnML.utils.precision_score": {"tf": 2}, "learnML.utils.recall_score": {"tf": 2}, "learnML.utils.Errors": {"tf": 1}, "learnML.utils.Errors.mean_squared_error": {"tf": 2}, "learnML.utils.Errors.mean_absolute_error": {"tf": 2}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 2}, "learnML.utils.mean_squared_error": {"tf": 2}, "learnML.utils.mean_absolute_error": {"tf": 2}, "learnML.utils.mean_squared_log_error": {"tf": 2}}, "df": 87, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"learnML.interfaces.IModel.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.score": {"tf": 1.4142135623730951}}, "df": 7, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML": {"tf": 1.4142135623730951}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 8}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 2.449489742783178}, "learnML.classification.LogisticRegression.fit": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 2.449489742783178}, "learnML.classification.LinearSVC.fit": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2.449489742783178}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 2.6457513110645907}, "learnML.regression.LinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.8284271247461903}}, "df": 37}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}, "n": {"docs": {"learnML": {"tf": 2.23606797749979}, "learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 2}, "learnML.regression.LinearRegression": {"tf": 1.7320508075688772}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 10, "l": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}, "e": {"docs": {"learnML.preprocessing.OneHotEncoder": {"tf": 2.23606797749979}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 4, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.preprocessing.OneHotEncoder": {"tf": 2.449489742783178}}, "df": 1}}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.OneLeaveOutSplit": {"tf": 2.6457513110645907}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 2.6457513110645907}}, "df": 2}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"learnML": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}}, "df": 3, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.predict": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.score": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IModel.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.interfaces.IRegression.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1.7320508075688772}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 2}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 33, "s": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}}, "df": 9}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 2}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}}, "df": 2}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 9}}}}}}}, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 5}}}}}, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 5}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LogisticRegression.fit": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.predict": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IModel.predict": {"tf": 1}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.interfaces.IRegression.predict": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.f1_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.r2_score": {"tf": 1.4142135623730951}, "learnML.utils.confusion_matrix": {"tf": 1.4142135623730951}, "learnML.utils.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_log_error": {"tf": 1.4142135623730951}}, "df": 37, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 5}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 4}}}}}}}}, "s": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LogisticRegression": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC": {"tf": 2}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 7, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression": {"tf": 2}, "learnML.classification.LinearSVC": {"tf": 2}, "learnML.interfaces.IModel": {"tf": 1.7320508075688772}, "learnML.interfaces.IModel.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression.score": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization": {"tf": 3.3166247903554}, "learnML.regression.UnivariateLinearRegression": {"tf": 2}, "learnML.regression.LinearRegression": {"tf": 2}, "learnML.regression.PolynomialRegression": {"tf": 2}, "learnML.utils.Metrics.accuracy_score": {"tf": 1}, "learnML.utils.Metrics.precision_score": {"tf": 1}, "learnML.utils.Metrics.recall_score": {"tf": 1}, "learnML.utils.Metrics.f1_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.r2_score": {"tf": 1.4142135623730951}, "learnML.utils.accuracy_score": {"tf": 1}, "learnML.utils.precision_score": {"tf": 1}, "learnML.utils.recall_score": {"tf": 1}}, "df": 18}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.interfaces.IRegression": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 5}}, "e": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1, "s": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 2.23606797749979}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.7320508075688772}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"learnML": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 13}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML.interfaces.IModel": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 3, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 5}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"learnML": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}, "s": {"docs": {"learnML.interfaces.IRegression": {"tf": 1}}, "df": 1}}}, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 5}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1.7320508075688772}, "learnML.preprocessing.KFoldSplit": {"tf": 2.6457513110645907}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2.6457513110645907}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}}, "df": 12, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}}, "df": 4}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 2.23606797749979}}, "df": 2, "s": {"docs": {"learnML.classification.LogisticRegression.fit": {"tf": 2}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.predict": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 2.6457513110645907}, "learnML.classification.LinearSVC.fit": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.predict": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.fit": {"tf": 1.7320508075688772}, "learnML.interfaces.IModel.predict": {"tf": 1.7320508075688772}, "learnML.interfaces.IModel.score": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.fit": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression.predict": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression.score": {"tf": 1.7320508075688772}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 2.449489742783178}, "learnML.regression.LinearRegression.predict": {"tf": 2.449489742783178}, "learnML.regression.LinearRegression.score": {"tf": 2}, "learnML.utils.Metrics.confusion_matrix": {"tf": 2}, "learnML.utils.Metrics.accuracy_score": {"tf": 2}, "learnML.utils.Metrics.precision_score": {"tf": 2}, "learnML.utils.Metrics.recall_score": {"tf": 2}, "learnML.utils.Metrics.f1_score": {"tf": 2}, "learnML.utils.Metrics.r2_score": {"tf": 2}, "learnML.utils.confusion_matrix": {"tf": 2}, "learnML.utils.accuracy_score": {"tf": 2}, "learnML.utils.precision_score": {"tf": 2}, "learnML.utils.recall_score": {"tf": 2}, "learnML.utils.Errors.mean_squared_error": {"tf": 2}, "learnML.utils.Errors.mean_absolute_error": {"tf": 2}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 2}, "learnML.utils.mean_squared_error": {"tf": 2}, "learnML.utils.mean_absolute_error": {"tf": 2}, "learnML.utils.mean_squared_log_error": {"tf": 2}}, "df": 55}}}}, "e": {"docs": {"learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1.4142135623730951}}, "df": 3}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "f": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {"learnML.classification.LinearSVC": {"tf": 1.4142135623730951}}, "df": 1}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2}}, "df": 7}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.7320508075688772}}, "df": 2, "s": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}}, "df": 3}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LinearSVC": {"tf": 2.23606797749979}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}}, "df": 2, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 2}}}}}}}}, "m": {"docs": {"learnML.classification.LinearSVC": {"tf": 1.4142135623730951}}, "df": 1}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"learnML.preprocessing.OneHotEncoder": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression.fit": {"tf": 1.7320508075688772}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.predict": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.score": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.fit": {"tf": 2}, "learnML.classification.LinearSVC.predict": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.fit": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.predict": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.score": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 2.23606797749979}, "learnML.regression.LinearRegression.predict": {"tf": 2}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.f1_score": {"tf": 1.4142135623730951}, "learnML.utils.Metrics.r2_score": {"tf": 1.4142135623730951}, "learnML.utils.confusion_matrix": {"tf": 1.4142135623730951}, "learnML.utils.accuracy_score": {"tf": 1.4142135623730951}, "learnML.utils.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.recall_score": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_log_error": {"tf": 1.4142135623730951}}, "df": 58}}}, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}}, "df": 4, "d": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 2, "s": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.interfaces.IModel": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {"learnML.interfaces.IModel": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 2.23606797749979}, "learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 2.23606797749979}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}}, "df": 5, "s": {"docs": {"learnML.preprocessing.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit": {"tf": 2.23606797749979}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 2}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2.23606797749979}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 2}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1.4142135623730951}}, "df": 12}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"learnML.interfaces.IModel": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"learnML.interfaces.IModel": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering": {"tf": 2.23606797749979}, "learnML.interfaces.IRegression": {"tf": 2}}, "df": 3}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"learnML.classification.LinearSVC": {"tf": 1.4142135623730951}}, "df": 1}}}}, "q": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.utils.Errors.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_log_error": {"tf": 1.4142135623730951}}, "df": 4}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}}, "df": 1, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 6}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 2, "d": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.__init__": {"tf": 1.7320508075688772}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2.449489742783178}, "learnML.regression.LinearRegression.__init__": {"tf": 2.449489742783178}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.449489742783178}}, "df": 5}, "s": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.interfaces.IModel": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.7320508075688772}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 5}}}}, "d": {"docs": {"learnML.utils.Metrics.confusion_matrix": {"tf": 1}, "learnML.utils.Metrics.accuracy_score": {"tf": 1}, "learnML.utils.Metrics.precision_score": {"tf": 1}, "learnML.utils.Metrics.recall_score": {"tf": 1}, "learnML.utils.Metrics.f1_score": {"tf": 1}, "learnML.utils.Metrics.r2_score": {"tf": 1}, "learnML.utils.confusion_matrix": {"tf": 1}, "learnML.utils.accuracy_score": {"tf": 1}, "learnML.utils.precision_score": {"tf": 1}, "learnML.utils.recall_score": {"tf": 1}, "learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_error": {"tf": 1}, "learnML.utils.mean_absolute_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 16, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.7320508075688772}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1}, "learnML.classification.LogisticRegression.predict": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.predict": {"tf": 1}, "learnML.interfaces.IModel": {"tf": 1.7320508075688772}, "learnML.interfaces.IModel.predict": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression.predict": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 12, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.interfaces.IRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1}, "learnML.utils.Metrics.accuracy_score": {"tf": 1}, "learnML.utils.Metrics.precision_score": {"tf": 1}, "learnML.utils.Metrics.recall_score": {"tf": 1}, "learnML.utils.Metrics.f1_score": {"tf": 1}, "learnML.utils.Metrics.r2_score": {"tf": 1}, "learnML.utils.confusion_matrix": {"tf": 1}, "learnML.utils.accuracy_score": {"tf": 1}, "learnML.utils.precision_score": {"tf": 1}, "learnML.utils.recall_score": {"tf": 1}, "learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_error": {"tf": 1}, "learnML.utils.mean_absolute_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 18, "s": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC": {"tf": 1.7320508075688772}, "learnML.interfaces.IRegression": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression": {"tf": 1.7320508075688772}, "learnML.regression.PolynomialRegression": {"tf": 1.7320508075688772}}, "df": 6}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"learnML.regression.LinearRegression": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.classification.LogisticRegression.predict_proba": {"tf": 1}, "learnML.classification.LogisticRegression.predict": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.classification.LinearSVC.predict": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 9}}, "s": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.4142135623730951}}, "df": 10}}}}}}}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.utils.Metrics.precision_score": {"tf": 1.4142135623730951}, "learnML.utils.precision_score": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LinearSVC": {"tf": 1.7320508075688772}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}}, "df": 3}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 3}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 2.8284271247461903}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 3.3166247903554}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.8284271247461903}}, "df": 5, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 2.6457513110645907}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 2.23606797749979}}, "df": 1}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 2}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {"learnML": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"learnML.interfaces.IModel": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {"learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1.4142135623730951}}, "df": 4, "o": {"docs": {}, "df": 0, "c": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 7}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 5}}}, "e": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 4}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 2}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 2}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 2}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2}}, "df": 6, "s": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1}, "learnML.classification.LogisticRegression.predict": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.predict": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IModel.predict": {"tf": 1}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.__init__": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.interfaces.IRegression.predict": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.predict": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}, "learnML.utils.Metrics.confusion_matrix": {"tf": 1}, "learnML.utils.Metrics.accuracy_score": {"tf": 1}, "learnML.utils.Metrics.precision_score": {"tf": 1}, "learnML.utils.Metrics.recall_score": {"tf": 1}, "learnML.utils.Metrics.f1_score": {"tf": 1}, "learnML.utils.Metrics.r2_score": {"tf": 1}, "learnML.utils.confusion_matrix": {"tf": 1}, "learnML.utils.accuracy_score": {"tf": 1}, "learnML.utils.precision_score": {"tf": 1}, "learnML.utils.recall_score": {"tf": 1}, "learnML.utils.Errors.mean_squared_error": {"tf": 1}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1}, "learnML.utils.mean_squared_error": {"tf": 1}, "learnML.utils.mean_absolute_error": {"tf": 1}, "learnML.utils.mean_squared_log_error": {"tf": 1}}, "df": 71}}}}}, "s": {"docs": {"learnML.interfaces.IRegression": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"learnML.interfaces.IModel": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering": {"tf": 2}, "learnML.interfaces.IRegression": {"tf": 1.7320508075688772}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1.4142135623730951}}, "df": 12}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"learnML": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.7320508075688772}}, "df": 12}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 3}}}, "y": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.preprocessing.OneHotEncoder": {"tf": 1}}, "df": 1, "s": {"docs": {"learnML.preprocessing.OneHotEncoder.get_encodings": {"tf": 1.4142135623730951}}, "df": 1}}}}, "e": {"docs": {"learnML.preprocessing.OneHotEncoder": {"tf": 1}}, "df": 1, "r": {"docs": {"learnML.preprocessing.OneHotEncoder": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1}}, "df": 5}, "d": {"docs": {"learnML.preprocessing.OneHotEncoder": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"learnML": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"learnML": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1, "s": {"docs": {"learnML.interfaces.IModel": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 2}}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "y": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 5}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 2}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.__init__": {"tf": 1.7320508075688772}, "learnML.interfaces.IFeatureEngineering": {"tf": 3.3166247903554}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2.449489742783178}, "learnML.regression.LinearRegression.__init__": {"tf": 2.449489742783178}, "learnML.regression.PolynomialRegression.__init__": {"tf": 2.449489742783178}}, "df": 7}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}}, "df": 1}}}}}}}, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 2, "s": {"docs": {"learnML": {"tf": 2}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 3}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.interfaces.IModel": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.regression.LinearRegression": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"learnML.interfaces.IRegression": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.interfaces.IModel": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 7}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LinearSVC": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LinearSVC": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"learnML.utils.Errors.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.Errors.mean_squared_log_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_absolute_error": {"tf": 1.4142135623730951}, "learnML.utils.mean_squared_log_error": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.utils.Errors": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}}, "df": 4}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}, "b": {"0": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1.7320508075688772}}, "df": 1}, "1": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 1, "*": {"docs": {}, "df": 0, "x": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}, "2": {"docs": {}, "df": 0, "*": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "^": {"2": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}}, "docs": {"learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.7320508075688772}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.LinearRegression.score": {"tf": 1}}, "df": 11, "e": {"docs": {"learnML": {"tf": 2}, "learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.__init__": {"tf": 2.23606797749979}, "learnML.classification.LogisticRegression.fit": {"tf": 2}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 2.23606797749979}, "learnML.classification.LinearSVC.fit": {"tf": 2}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.__init__": {"tf": 2.449489742783178}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 2}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.__init__": {"tf": 2.23606797749979}, "learnML.preprocessing.OneHotEncoder.fit": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneHotEncoder.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.OneHotEncoder.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 2}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2.449489742783178}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 2.6457513110645907}, "learnML.regression.LinearRegression.fit": {"tf": 2.449489742783178}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 3.3166247903554}}, "df": 37, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 2}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.7320508075688772}}, "df": 12}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 3}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"learnML.interfaces.IModel": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.preprocessing.OneHotEncoder": {"tf": 1}, "learnML.preprocessing.KFoldSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1}}, "df": 5}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 2.6457513110645907}, "learnML.classification.LogisticRegression.fit": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 2.23606797749979}, "learnML.classification.LinearSVC.__init__": {"tf": 2.6457513110645907}, "learnML.classification.LinearSVC.fit": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.score": {"tf": 1}, "learnML.interfaces.IModel": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.transform": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.fit_transform": {"tf": 1}, "learnML.interfaces.IRegression.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.7320508075688772}, "learnML.preprocessing.ZScoreNormalization.fit": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.transform": {"tf": 1}, "learnML.preprocessing.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 2.449489742783178}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 2.8284271247461903}, "learnML.regression.LinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.7320508075688772}, "learnML.regression.PolynomialRegression.__init__": {"tf": 3}}, "df": 40}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.7320508075688772}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"learnML.regression.LinearRegression": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.7320508075688772}, "learnML.classification.LinearSVC.__init__": {"tf": 1.7320508075688772}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.7320508075688772}, "learnML.regression.PolynomialRegression": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.7320508075688772}}, "df": 6}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 6}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"learnML.classification.LinearSVC": {"tf": 2}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}}, "df": 3}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"learnML.interfaces.IFeatureEngineering": {"tf": 1}, "learnML.interfaces.IFeatureEngineering.inverse_transform": {"tf": 1}}, "df": 2}}}, "n": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 1, "*": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "^": {"docs": {}, "df": 0, "n": {"docs": {"learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "p": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 1, "s": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 5}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 7}, "t": {"docs": {"learnML.preprocessing.OneHotEncoder": {"tf": 2.23606797749979}}, "df": 1}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}, "learnML.classification.LogisticRegression": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.ZScoreNormalization.fit_transform": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization.inverse_transform": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}}, "df": 7}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {"learnML.classification.LinearSVC": {"tf": 1.4142135623730951}}, "df": 1}, "s": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 6}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LinearSVC": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1}, "learnML.classification.LogisticRegression.__init__": {"tf": 1}, "learnML.classification.LinearSVC": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 7, "e": {"docs": {}, "df": 0, "r": {"docs": {"learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 1}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 7}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LinearSVC": {"tf": 3.1622776601683795}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"learnML.interfaces.IRegression": {"tf": 2.449489742783178}, "learnML.interfaces.IRegression.get_cost_history": {"tf": 1.4142135623730951}, "learnML.interfaces.IRegression.get_parameter_history": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"learnML": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 1}}}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "v": {"docs": {"learnML": {"tf": 1.4142135623730951}}, "df": 1, "/": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "\\": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"learnML.classification.LinearSVC": {"tf": 2}}, "df": 1, "s": {"docs": {"learnML.classification.LinearSVC": {"tf": 1.7320508075688772}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"learnML": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1}}, "df": 6}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}, "learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression.fit": {"tf": 1}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1}}, "df": 7, "s": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 1.4142135623730951}, "learnML.preprocessing.PolynomialFeatures": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1.4142135623730951}}, "df": 6}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"learnML.regression.UnivariateLinearRegression": {"tf": 2.23606797749979}, "learnML.regression.LinearRegression": {"tf": 2.23606797749979}, "learnML.regression.PolynomialRegression": {"tf": 1.7320508075688772}}, "df": 3, "s": {"docs": {"learnML.interfaces.IRegression": {"tf": 1}, "learnML.regression.UnivariateLinearRegression": {"tf": 1}, "learnML.regression.LinearRegression": {"tf": 1}}, "df": 3}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"learnML.preprocessing.PolynomialFeatures": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 1}}, "df": 2}}}}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"learnML": {"tf": 1}}, "df": 1}}}}}}}, "x": {"1": {"docs": {"learnML.regression.LinearRegression": {"tf": 1.4142135623730951}}, "df": 1}, "2": {"docs": {"learnML.regression.LinearRegression": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {"learnML.classification.LogisticRegression": {"tf": 2.449489742783178}, "learnML.classification.LogisticRegression.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LogisticRegression.predict_proba": {"tf": 1}, "learnML.classification.LogisticRegression.predict": {"tf": 1}, "learnML.classification.LogisticRegression.score": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 2.6457513110645907}, "learnML.classification.LinearSVC.__init__": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.classification.LinearSVC.predict": {"tf": 1}, "learnML.classification.LinearSVC.score": {"tf": 1.4142135623730951}, "learnML.interfaces.IModel": {"tf": 1.7320508075688772}, "learnML.interfaces.IModel.fit": {"tf": 1}, "learnML.interfaces.IModel.predict": {"tf": 1}, "learnML.interfaces.IModel.score": {"tf": 1}, "learnML.interfaces.IRegression": {"tf": 2.8284271247461903}, "learnML.interfaces.IRegression.__init__": {"tf": 1}, "learnML.interfaces.IRegression.fit": {"tf": 1}, "learnML.interfaces.IRegression.predict": {"tf": 1}, "learnML.interfaces.IRegression.score": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 3.4641016151377544}, "learnML.preprocessing.PolynomialFeatures": {"tf": 3.4641016151377544}, "learnML.preprocessing.train_test_split": {"tf": 2.8284271247461903}, "learnML.preprocessing.KFoldSplit": {"tf": 2.23606797749979}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 2}, "learnML.preprocessing.OneLeaveOutSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 2}, "learnML.preprocessing.train_test_split.train_test_split": {"tf": 2.8284271247461903}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2.23606797749979}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 2}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.__init__": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 2}, "learnML.regression.UnivariateLinearRegression": {"tf": 2}, "learnML.regression.UnivariateLinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.UnivariateLinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression": {"tf": 1.7320508075688772}, "learnML.regression.LinearRegression.__init__": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.fit": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.predict": {"tf": 1.4142135623730951}, "learnML.regression.LinearRegression.score": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression": {"tf": 2.23606797749979}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 48, "n": {"docs": {"learnML.regression.LinearRegression": {"tf": 1.4142135623730951}}, "df": 1}}, "z": {"docs": {"learnML.classification.LogisticRegression": {"tf": 1.4142135623730951}, "learnML.classification.LinearSVC": {"tf": 2.8284271247461903}, "learnML.preprocessing.ZScoreNormalization": {"tf": 3.4641016151377544}}, "df": 3, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {"learnML.classification.LogisticRegression.fit": {"tf": 1}, "learnML.classification.LinearSVC.fit": {"tf": 1}, "learnML.regression.LinearRegression.fit": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"learnML.preprocessing.ZScoreNormalization": {"tf": 2.449489742783178}}, "df": 1}}}}}}}}}}}}}}}}}}}, "k": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 2.8284271247461903}, "learnML.preprocessing.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.OneLeaveOutSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2.8284271247461903}, "learnML.preprocessing.train_test_split.KFoldSplit.__init__": {"tf": 1.4142135623730951}, "learnML.preprocessing.train_test_split.KFoldSplit.split": {"tf": 1}, "learnML.preprocessing.train_test_split.KFoldSplit.get_fold": {"tf": 1}, "learnML.preprocessing.train_test_split.OneLeaveOutSplit.get_fold": {"tf": 1}}, "df": 10, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"learnML.classification.LinearSVC": {"tf": 1}, "learnML.preprocessing.ZScoreNormalization": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "y": {"docs": {"learnML.preprocessing.PolynomialFeatures.__init__": {"tf": 1.4142135623730951}, "learnML.regression.PolynomialRegression.__init__": {"tf": 1.4142135623730951}}, "df": 2}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 1.7320508075688772}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 1.7320508075688772}}, "df": 2, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"learnML.preprocessing.KFoldSplit": {"tf": 2.449489742783178}, "learnML.preprocessing.train_test_split.KFoldSplit": {"tf": 2.449489742783178}}, "df": 2}}}}}}}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();